//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let entitlements = entitlements()
  let reuseIdentifier = reuseIdentifier()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var image: image { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 258 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: There are no activity by this user 
      ///
      /// Key: 0j0-lS-WKF.text
      ///
      /// Locales: en, tr, fr, ar
      var j0LSWKFText: RswiftResources.StringResource { .init(key: "0j0-lS-WKF.text", tableName: "Localizable", source: source, developmentValue: "There are no activity by this user ", comment: nil) }

      /// en translation: 2 days ago
      ///
      /// Key: 2 days ago
      ///
      /// Locales: en, tr, fr, ar
      var daysAgo: RswiftResources.StringResource { .init(key: "2 days ago", tableName: "Localizable", source: source, developmentValue: "2 days ago", comment: nil) }

      /// en translation: A confirmation email has been sent
      ///
      /// Key: A confirmation email has been sent
      ///
      /// Locales: en, tr
      var aConfirmationEmailHasBeenSent: RswiftResources.StringResource { .init(key: "A confirmation email has been sent", tableName: "Localizable", source: source, developmentValue: "A confirmation email has been sent", comment: nil) }

      /// en translation: ACTIVITIES
      ///
      /// Key: ACTIVITIES
      ///
      /// Locales: en, tr
      var activitieS: RswiftResources.StringResource { .init(key: "ACTIVITIES", tableName: "Localizable", source: source, developmentValue: "ACTIVITIES", comment: nil) }

      /// en translation: ALBUMS
      ///
      /// Key: ALBUMS
      ///
      /// Locales: en, tr
      var albumS: RswiftResources.StringResource { .init(key: "ALBUMS", tableName: "Localizable", source: source, developmentValue: "ALBUMS", comment: nil) }

      /// en translation: APPLY FILTER
      ///
      /// Key: APPLY FILTER
      ///
      /// Locales: en, tr, fr, ar
      var applyfilteR: RswiftResources.StringResource { .init(key: "APPLY FILTER", tableName: "Localizable", source: source, developmentValue: "APPLY FILTER", comment: nil) }

      /// en translation: ARTIST
      ///
      /// Key: ARTIST
      ///
      /// Locales: en, tr
      var artisT: RswiftResources.StringResource { .init(key: "ARTIST", tableName: "Localizable", source: source, developmentValue: "ARTIST", comment: nil) }

      /// en translation: Activities
      ///
      /// Key: Activities
      ///
      /// Locales: en, tr, fr, ar
      var activities: RswiftResources.StringResource { .init(key: "Activities", tableName: "Localizable", source: source, developmentValue: "Activities", comment: nil) }

      /// en translation: Add All information about this audio file
      ///
      /// Key: Add All information about this audio file
      ///
      /// Locales: en, tr, fr, ar
      var addAllInformationAboutThisAudioFile: RswiftResources.StringResource { .init(key: "Add All information about this audio file", tableName: "Localizable", source: source, developmentValue: "Add All information about this audio file", comment: nil) }

      /// en translation: Add code number
      ///
      /// Key: Add code number
      ///
      /// Locales: en, tr
      var addCodeNumber: RswiftResources.StringResource { .init(key: "Add code number", tableName: "Localizable", source: source, developmentValue: "Add code number", comment: nil) }

      /// en translation: Add tag to describe more about your track by  Add a ',' sign at the end of each TAG without space between them
      ///
      /// Key: Add tag to describe more about your track by  Add a ',' sign at the end of each TAG without space between them
      ///
      /// Locales: en, tr, fr, ar
      var addTagToDescribeMoreAboutYourTrackByAddASignAtTheEndOfEachTAGWithoutSpaceBetweenThem: RswiftResources.StringResource { .init(key: "Add tag to describe more about your track by  Add a ',' sign at the end of each TAG without space between them", tableName: "Localizable", source: source, developmentValue: "Add tag to describe more about your track by  Add a ',' sign at the end of each TAG without space between them", comment: nil) }

      /// en translation: Added On
      ///
      /// Key: Added On
      ///
      /// Locales: en, tr, fr, ar
      var addedOn: RswiftResources.StringResource { .init(key: "Added On", tableName: "Localizable", source: source, developmentValue: "Added On", comment: nil) }

      /// en translation: Age Restriction
      ///
      /// Key: Age Restriction
      ///
      /// Locales: en, tr, fr, ar
      var ageRestriction: RswiftResources.StringResource { .init(key: "Age Restriction", tableName: "Localizable", source: source, developmentValue: "Age Restriction", comment: nil) }

      /// en translation: Album
      ///
      /// Key: Album
      ///
      /// Locales: en, tr
      var album: RswiftResources.StringResource { .init(key: "Album", tableName: "Localizable", source: source, developmentValue: "Album", comment: nil) }

      /// en translation: Album Title
      ///
      /// Key: Album Title
      ///
      /// Locales: en, tr
      var albumTitle: RswiftResources.StringResource { .init(key: "Album Title", tableName: "Localizable", source: source, developmentValue: "Album Title", comment: nil) }

      /// en translation: Are you sure you want to delete this playlist ?
      ///
      /// Key: Are you sure you want to delete this playlist ?
      ///
      /// Locales: en, tr, fr, ar
      var areYouSureYouWantToDeleteThisPlaylist: RswiftResources.StringResource { .init(key: "Are you sure you want to delete this playlist ?", tableName: "Localizable", source: source, developmentValue: "Are you sure you want to delete this playlist ?", comment: nil) }

      /// en translation: Are you sure you want to log out?
      ///
      /// Key: Are you sure you want to log out?
      ///
      /// Locales: en, tr, fr, ar
      var areYouSureYouWantToLogOut: RswiftResources.StringResource { .init(key: "Are you sure you want to log out?", tableName: "Localizable", source: source, developmentValue: "Are you sure you want to log out?", comment: nil) }

      /// en translation: Are you sure you want to logout
      ///
      /// Key: Are you sure you want to logout
      ///
      /// Locales: en, tr
      var areYouSureYouWantToLogout: RswiftResources.StringResource { .init(key: "Are you sure you want to logout", tableName: "Localizable", source: source, developmentValue: "Are you sure you want to logout", comment: nil) }

      /// en translation: Are you sure you want to unblock this
      ///
      /// Key: Are you sure you want to unblock this
      ///
      /// Locales: en, tr
      var areYouSureYouWantToUnblockThis: RswiftResources.StringResource { .init(key: "Are you sure you want to unblock this", tableName: "Localizable", source: source, developmentValue: "Are you sure you want to unblock this", comment: nil) }

      /// en translation: Articles
      ///
      /// Key: Articles
      ///
      /// Locales: en, tr
      var articles: RswiftResources.StringResource { .init(key: "Articles", tableName: "Localizable", source: source, developmentValue: "Articles", comment: nil) }

      /// en translation: Artist
      ///
      /// Key: Artist
      ///
      /// Locales: en, tr
      var artist: RswiftResources.StringResource { .init(key: "Artist", tableName: "Localizable", source: source, developmentValue: "Artist", comment: nil) }

      /// en translation: Availability
      ///
      /// Key: Availability
      ///
      /// Locales: en, tr, fr, ar
      var availability: RswiftResources.StringResource { .init(key: "Availability", tableName: "Localizable", source: source, developmentValue: "Availability", comment: nil) }

      /// en translation: BUY
      ///
      /// Key: BUY
      ///
      /// Locales: en, tr
      var buY: RswiftResources.StringResource { .init(key: "BUY", tableName: "Localizable", source: source, developmentValue: "BUY", comment: nil) }

      /// en translation: BY REGISTERING YOU AGREE TO OUR 
      ///
      /// Key: BY REGISTERING YOU AGREE TO OUR 
      ///
      /// Locales: en, tr
      var byregisteringyouagreetoouR: RswiftResources.StringResource { .init(key: "BY REGISTERING YOU AGREE TO OUR ", tableName: "Localizable", source: source, developmentValue: "BY REGISTERING YOU AGREE TO OUR ", comment: nil) }

      /// en translation: Bank Transfer
      ///
      /// Key: Bank Transfer
      ///
      /// Locales: en, tr
      var bankTransfer: RswiftResources.StringResource { .init(key: "Bank Transfer", tableName: "Localizable", source: source, developmentValue: "Bank Transfer", comment: nil) }

      /// en translation: Block
      ///
      /// Key: Block
      ///
      /// Locales: en, tr, fr, ar
      var block: RswiftResources.StringResource { .init(key: "Block", tableName: "Localizable", source: source, developmentValue: "Block", comment: nil) }

      /// en translation: Blocked Users
      ///
      /// Key: Blocked Users
      ///
      /// Locales: en, tr, fr, ar
      var blockedUsers: RswiftResources.StringResource { .init(key: "Blocked Users", tableName: "Localizable", source: source, developmentValue: "Blocked Users", comment: nil) }

      /// en translation: Browse 
      ///
      /// Key: Browse 
      ///
      /// Locales: en, tr, fr, ar
      var browse: RswiftResources.StringResource { .init(key: "Browse ", tableName: "Localizable", source: source, developmentValue: "Browse ", comment: nil) }

      /// en translation: Browser
      ///
      /// Key: Browser
      ///
      /// Locales: en, tr
      var browser: RswiftResources.StringResource { .init(key: "Browser", tableName: "Localizable", source: source, developmentValue: "Browser", comment: nil) }

      /// en translation: By
      ///
      /// Key: By
      ///
      /// Locales: en, tr, fr, ar
      var by: RswiftResources.StringResource { .init(key: "By", tableName: "Localizable", source: source, developmentValue: "By", comment: nil) }

      /// en translation: CLOSE
      ///
      /// Key: CLOSE
      ///
      /// Locales: en, tr, fr, ar
      var closE: RswiftResources.StringResource { .init(key: "CLOSE", tableName: "Localizable", source: source, developmentValue: "CLOSE", comment: nil) }

      /// en translation: CREATE
      ///
      /// Key: CREATE
      ///
      /// Locales: en, tr, fr, ar
      var creatE: RswiftResources.StringResource { .init(key: "CREATE", tableName: "Localizable", source: source, developmentValue: "CREATE", comment: nil) }

      /// en translation: CREATE AN ACCOUNT
      ///
      /// Key: CREATE AN ACCOUNT
      ///
      /// Locales: en, tr, fr, ar
      var createanaccounT: RswiftResources.StringResource { .init(key: "CREATE AN ACCOUNT", tableName: "Localizable", source: source, developmentValue: "CREATE AN ACCOUNT", comment: nil) }

      /// en translation: Calling all creators
      ///
      /// Key: Calling all creators
      ///
      /// Locales: en
      var callingAllCreators: RswiftResources.StringResource { .init(key: "Calling all creators", tableName: "Localizable", source: source, developmentValue: "Calling all creators", comment: nil) }

      /// en translation: Camera
      ///
      /// Key: Camera
      ///
      /// Locales: en, tr
      var camera: RswiftResources.StringResource { .init(key: "Camera", tableName: "Localizable", source: source, developmentValue: "Camera", comment: nil) }

      /// en translation: Cancel
      ///
      /// Key: Cancel
      ///
      /// Locales: en, tr
      var cancel: RswiftResources.StringResource { .init(key: "Cancel", tableName: "Localizable", source: source, developmentValue: "Cancel", comment: nil) }

      /// en translation: Cerate and share playlist. Each playlist is custom created and organized to help you find the best music for your preference.
      ///
      /// Key: Cerate and share playlist. Each playlist is custom created and organized to help you find the best music for your preference.
      ///
      /// Locales: en, tr, fr, ar
      var cerateAndSharePlaylistEachPlaylistIsCustomCreatedAndOrganizedToHelpYouFindTheBestMusicForYourPreference: RswiftResources.StringResource { .init(key: "Cerate and share playlist. Each playlist is custom created and organized to help you find the best music for your preference.", tableName: "Localizable", source: source, developmentValue: "Cerate and share playlist. Each playlist is custom created and organized to help you find the best music for your preference.", comment: nil) }

      /// en translation: Change Password
      ///
      /// Key: Change Password
      ///
      /// Locales: en, tr
      var changePassword: RswiftResources.StringResource { .init(key: "Change Password", tableName: "Localizable", source: source, developmentValue: "Change Password", comment: nil) }

      /// fr translation: Change cover image 
      ///
      /// Key: Change cover image 
      ///
      /// Locales: fr, ar
      var changeCoverImage: RswiftResources.StringResource { .init(key: "Change cover image ", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Change your password
      ///
      /// Key: Change your password
      ///
      /// Locales: en, tr, fr, ar
      var changeYourPassword: RswiftResources.StringResource { .init(key: "Change your password", tableName: "Localizable", source: source, developmentValue: "Change your password", comment: nil) }

      /// en translation: Chat
      ///
      /// Key: Chat
      ///
      /// Locales: en, tr
      var chat: RswiftResources.StringResource { .init(key: "Chat", tableName: "Localizable", source: source, developmentValue: "Chat", comment: nil) }

      /// en translation: Choose Genres
      ///
      /// Key: Choose Genres
      ///
      /// Locales: en, tr, fr, ar
      var chooseGenres: RswiftResources.StringResource { .init(key: "Choose Genres", tableName: "Localizable", source: source, developmentValue: "Choose Genres", comment: nil) }

      /// en translation: Choose Price
      ///
      /// Key: Choose Price
      ///
      /// Locales: en, tr, fr, ar
      var choosePrice: RswiftResources.StringResource { .init(key: "Choose Price", tableName: "Localizable", source: source, developmentValue: "Choose Price", comment: nil) }

      /// en translation: Choose your age
      ///
      /// Key: Choose your age
      ///
      /// Locales: en, tr, fr, ar
      var chooseYourAge: RswiftResources.StringResource { .init(key: "Choose your age", tableName: "Localizable", source: source, developmentValue: "Choose your age", comment: nil) }

      /// en translation: Choose your country
      ///
      /// Key: Choose your country
      ///
      /// Locales: en, tr, fr, ar
      var chooseYourCountry: RswiftResources.StringResource { .init(key: "Choose your country", tableName: "Localizable", source: source, developmentValue: "Choose your country", comment: nil) }

      /// en translation: Comments
      ///
      /// Key: Comments
      ///
      /// Locales: en, tr, fr, ar
      var comments: RswiftResources.StringResource { .init(key: "Comments", tableName: "Localizable", source: source, developmentValue: "Comments", comment: nil) }

      /// en translation: Confirm Password
      ///
      /// Key: Confirm Password
      ///
      /// Locales: en, tr
      var confirmPassword: RswiftResources.StringResource { .init(key: "Confirm Password", tableName: "Localizable", source: source, developmentValue: "Confirm Password", comment: nil) }

      /// en translation: Connect with Local Singles & Start Your Online Dating Adventure!
      ///
      /// Key: Connect with Local Singles & Start Your Online Dating Adventure!
      ///
      /// Locales: en, tr
      var connectWithLocalSinglesStartYourOnlineDatingAdventure: RswiftResources.StringResource { .init(key: "Connect with Local Singles & Start Your Online Dating Adventure!", tableName: "Localizable", source: source, developmentValue: "Connect with Local Singles & Start Your Online Dating Adventure!", comment: nil) }

      /// en translation: Connect with like minded people and exchange your love
      ///
      /// Key: Connect with like minded people and exchange your love
      ///
      /// Locales: en, tr
      var connectWithLikeMindedPeopleAndExchangeYourLove: RswiftResources.StringResource { .init(key: "Connect with like minded people and exchange your love", tableName: "Localizable", source: source, developmentValue: "Connect with like minded people and exchange your love", comment: nil) }

      /// en translation: Copy
      ///
      /// Key: Copy
      ///
      /// Locales: en, tr, fr, ar
      var copy: RswiftResources.StringResource { .init(key: "Copy", tableName: "Localizable", source: source, developmentValue: "Copy", comment: nil) }

      /// en translation: Copy Link to Image 
      ///
      /// Key: Copy Link to Image 
      ///
      /// Locales: en, tr, fr, ar
      var copyLinkToImage: RswiftResources.StringResource { .init(key: "Copy Link to Image ", tableName: "Localizable", source: source, developmentValue: "Copy Link to Image ", comment: nil) }

      /// en translation: Copy Playlist Link
      ///
      /// Key: Copy Playlist Link
      ///
      /// Locales: en, tr
      var copyPlaylistLink: RswiftResources.StringResource { .init(key: "Copy Playlist Link", tableName: "Localizable", source: source, developmentValue: "Copy Playlist Link", comment: nil) }

      /// en translation: Copy Profile Link
      ///
      /// Key: Copy Profile Link
      ///
      /// Locales: en, tr
      var copyProfileLink: RswiftResources.StringResource { .init(key: "Copy Profile Link", tableName: "Localizable", source: source, developmentValue: "Copy Profile Link", comment: nil) }

      /// en translation: Copy link to Profile
      ///
      /// Key: Copy link to Profile
      ///
      /// Locales: en, tr, fr, ar
      var copyLinkToProfile: RswiftResources.StringResource { .init(key: "Copy link to Profile", tableName: "Localizable", source: source, developmentValue: "Copy link to Profile", comment: nil) }

      /// en translation: Create Playlist with any song, On-The-Go
      ///
      /// Key: Create Playlist with any song, On-The-Go
      ///
      /// Locales: en
      var createPlaylistWithAnySongOnTheGo: RswiftResources.StringResource { .init(key: "Create Playlist with any song, On-The-Go", tableName: "Localizable", source: source, developmentValue: "Create Playlist with any song, On-The-Go", comment: nil) }

      /// en translation: Create and share Album. Each Album is custom created and organized to help you find the best music for your preference.
      ///
      /// Key: Create and share Album. Each Album is custom created and organized to help you find the best music for your preference.
      ///
      /// Locales: en, tr
      var createAndShareAlbumEachAlbumIsCustomCreatedAndOrganizedToHelpYouFindTheBestMusicForYourPreference: RswiftResources.StringResource { .init(key: "Create and share Album. Each Album is custom created and organized to help you find the best music for your preference.", tableName: "Localizable", source: source, developmentValue: "Create and share Album. Each Album is custom created and organized to help you find the best music for your preference.", comment: nil) }

      /// en translation: Created
      ///
      /// Key: Created
      ///
      /// Locales: en, tr, fr, ar
      var created: RswiftResources.StringResource { .init(key: "Created", tableName: "Localizable", source: source, developmentValue: "Created", comment: nil) }

      /// en translation: Current Password
      ///
      /// Key: Current Password
      ///
      /// Locales: en, tr, fr, ar
      var currentPassword: RswiftResources.StringResource { .init(key: "Current Password", tableName: "Localizable", source: source, developmentValue: "Current Password", comment: nil) }

      /// en translation: DONE
      ///
      /// Key: DONE
      ///
      /// Locales: en, tr, fr, ar
      var donE: RswiftResources.StringResource { .init(key: "DONE", tableName: "Localizable", source: source, developmentValue: "DONE", comment: nil) }

      /// en translation: Deep Sound
      ///
      /// Key: Deep Sound
      ///
      /// Locales: en, tr, fr, ar
      var deepSound: RswiftResources.StringResource { .init(key: "Deep Sound", tableName: "Localizable", source: source, developmentValue: "Deep Sound", comment: nil) }

      /// fr translation: Delete Account 
      ///
      /// Key: Delete Account 
      ///
      /// Locales: fr, ar
      var deleteAccount: RswiftResources.StringResource { .init(key: "Delete Account ", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Delete Album
      ///
      /// Key: Delete Album
      ///
      /// Locales: en, tr
      var deleteAlbum: RswiftResources.StringResource { .init(key: "Delete Album", tableName: "Localizable", source: source, developmentValue: "Delete Album", comment: nil) }

      /// en translation: Delete Playlist
      ///
      /// Key: Delete Playlist
      ///
      /// Locales: en, tr, fr, ar
      var deletePlaylist: RswiftResources.StringResource { .init(key: "Delete Playlist", tableName: "Localizable", source: source, developmentValue: "Delete Playlist", comment: nil) }

      /// en translation: Delete Song
      ///
      /// Key: Delete Song
      ///
      /// Locales: en, tr
      var deleteSong: RswiftResources.StringResource { .init(key: "Delete Song", tableName: "Localizable", source: source, developmentValue: "Delete Song", comment: nil) }

      /// en translation: Description
      ///
      /// Key: Description
      ///
      /// Locales: en, tr, fr, ar
      var description: RswiftResources.StringResource { .init(key: "Description", tableName: "Localizable", source: source, developmentValue: "Description", comment: nil) }

      /// en translation: Disable
      ///
      /// Key: Disable
      ///
      /// Locales: en, tr
      var disable: RswiftResources.StringResource { .init(key: "Disable", tableName: "Localizable", source: source, developmentValue: "Disable", comment: nil) }

      /// en translation: Discover
      ///
      /// Key: Discover
      ///
      /// Locales: en, tr
      var discover: RswiftResources.StringResource { .init(key: "Discover", tableName: "Localizable", source: source, developmentValue: "Discover", comment: nil) }

      /// fr translation: Discover,Stream, and share a constantly expanding mix of music from emerging and major artists around the world.
      ///
      /// Key: Discover,Stream, and share a constantly expanding mix of music from emerging and major artists around the world
      ///
      /// Locales: fr, ar
      var discoverStreamAndShareAConstantlyExpandingMixOfMusicFromEmergingAndMajorArtistsAroundTheWorld: RswiftResources.StringResource { .init(key: "Discover,Stream, and share a constantly expanding mix of music from emerging and major artists around the world", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Display
      ///
      /// Key: Display
      ///
      /// Locales: en, tr
      var display: RswiftResources.StringResource { .init(key: "Display", tableName: "Localizable", source: source, developmentValue: "Display", comment: nil) }

      /// en translation: Do you want to unblock this user
      ///
      /// Key: Do you want to unblock this user
      ///
      /// Locales: en, tr, fr, ar
      var doYouWantToUnblockThisUser: RswiftResources.StringResource { .init(key: "Do you want to unblock this user", tableName: "Localizable", source: source, developmentValue: "Do you want to unblock this user", comment: nil) }

      /// en translation: Download Songs
      ///
      /// Key: Download Songs
      ///
      /// Locales: en, tr
      var downloadSongs: RswiftResources.StringResource { .init(key: "Download Songs", tableName: "Localizable", source: source, developmentValue: "Download Songs", comment: nil) }

      /// en translation: EDIT PROFILE INFO
      ///
      /// Key: EDIT PROFILE INFO
      ///
      /// Locales: en, tr
      var editprofileinfO: RswiftResources.StringResource { .init(key: "EDIT PROFILE INFO", tableName: "Localizable", source: source, developmentValue: "EDIT PROFILE INFO", comment: nil) }

      /// en translation: Edit Album
      ///
      /// Key: Edit Album
      ///
      /// Locales: en, tr
      var editAlbum: RswiftResources.StringResource { .init(key: "Edit Album", tableName: "Localizable", source: source, developmentValue: "Edit Album", comment: nil) }

      /// en translation: Edit Playlist
      ///
      /// Key: Edit Playlist
      ///
      /// Locales: en, tr, fr, ar
      var editPlaylist: RswiftResources.StringResource { .init(key: "Edit Playlist", tableName: "Localizable", source: source, developmentValue: "Edit Playlist", comment: nil) }

      /// en translation: Edit Profile Info
      ///
      /// Key: Edit Profile Info
      ///
      /// Locales: en, tr
      var editProfileInfo: RswiftResources.StringResource { .init(key: "Edit Profile Info", tableName: "Localizable", source: source, developmentValue: "Edit Profile Info", comment: nil) }

      /// en translation: Edit Song
      ///
      /// Key: Edit Song
      ///
      /// Locales: en, tr
      var editSong: RswiftResources.StringResource { .init(key: "Edit Song", tableName: "Localizable", source: source, developmentValue: "Edit Song", comment: nil) }

      /// en translation: Email
      ///
      /// Key: Email
      ///
      /// Locales: en, tr, fr, ar
      var email: RswiftResources.StringResource { .init(key: "Email", tableName: "Localizable", source: source, developmentValue: "Email", comment: nil) }

      /// en translation: Enable
      ///
      /// Key: Enable
      ///
      /// Locales: en, tr
      var enable: RswiftResources.StringResource { .init(key: "Enable", tableName: "Localizable", source: source, developmentValue: "Enable", comment: nil) }

      /// en translation: Enjoy your favorite songs
      ///
      /// Key: Enjoy your favorite songs
      ///
      /// Locales: en, tr
      var enjoyYourFavoriteSongs: RswiftResources.StringResource { .init(key: "Enjoy your favorite songs", tableName: "Localizable", source: source, developmentValue: "Enjoy your favorite songs", comment: nil) }

      /// en translation: Error.Please confirm your password.
      ///
      /// Key: Error.Please confirm your password.
      ///
      /// Locales: en, tr
      var errorPleaseConfirmYourPassword: RswiftResources.StringResource { .init(key: "Error.Please confirm your password.", tableName: "Localizable", source: source, developmentValue: "Error.Please confirm your password.", comment: nil) }

      /// en translation: Explore by genre and mood
      ///
      /// Key: Explore by genre and mood
      ///
      /// Locales: en, tr, fr, ar
      var exploreByGenreAndMood: RswiftResources.StringResource { .init(key: "Explore by genre and mood", tableName: "Localizable", source: source, developmentValue: "Explore by genre and mood", comment: nil) }

      /// en translation: FOLLOW
      ///
      /// Key: FOLLOW
      ///
      /// Locales: en, tr
      var folloW: RswiftResources.StringResource { .init(key: "FOLLOW", tableName: "Localizable", source: source, developmentValue: "FOLLOW", comment: nil) }

      /// en translation: FOLLOWING
      ///
      /// Key: FOLLOWING
      ///
      /// Locales: en, tr
      var followinG: RswiftResources.StringResource { .init(key: "FOLLOWING", tableName: "Localizable", source: source, developmentValue: "FOLLOWING", comment: nil) }

      /// en translation: Facebook
      ///
      /// Key: Facebook
      ///
      /// Locales: en, tr, fr, ar
      var facebook: RswiftResources.StringResource { .init(key: "Facebook", tableName: "Localizable", source: source, developmentValue: "Facebook", comment: nil) }

      /// en translation: Favorite
      ///
      /// Key: Favorite
      ///
      /// Locales: en, tr
      var favorite: RswiftResources.StringResource { .init(key: "Favorite", tableName: "Localizable", source: source, developmentValue: "Favorite", comment: nil) }

      /// en translation: Female
      ///
      /// Key: Female
      ///
      /// Locales: en, tr, fr, ar
      var female: RswiftResources.StringResource { .init(key: "Female", tableName: "Localizable", source: source, developmentValue: "Female", comment: nil) }

      /// en translation: Search Random
      ///
      /// Key: Filter
      ///
      /// Locales: en, tr, fr, ar
      var filter: RswiftResources.StringResource { .init(key: "Filter", tableName: "Localizable", source: source, developmentValue: "Search Random", comment: nil) }

      /// en translation: First Name
      ///
      /// Key: First Name
      ///
      /// Locales: en, tr
      var firstName: RswiftResources.StringResource { .init(key: "First Name", tableName: "Localizable", source: source, developmentValue: "First Name", comment: nil) }

      /// en translation: Follow
      ///
      /// Key: Follow
      ///
      /// Locales: en, tr
      var follow: RswiftResources.StringResource { .init(key: "Follow", tableName: "Localizable", source: source, developmentValue: "Follow", comment: nil) }

      /// en translation: Followers
      ///
      /// Key: Followers
      ///
      /// Locales: en, tr, fr, ar
      var followers: RswiftResources.StringResource { .init(key: "Followers", tableName: "Localizable", source: source, developmentValue: "Followers", comment: nil) }

      /// en translation: Followings
      ///
      /// Key: Followings
      ///
      /// Locales: en, tr, fr, ar
      var followings: RswiftResources.StringResource { .init(key: "Followings", tableName: "Localizable", source: source, developmentValue: "Followings", comment: nil) }

      /// en translation: Full Name
      ///
      /// Key: Full Name
      ///
      /// Locales: en, tr, fr, ar
      var fullName: RswiftResources.StringResource { .init(key: "Full Name", tableName: "Localizable", source: source, developmentValue: "Full Name", comment: nil) }

      /// en translation: Gallery
      ///
      /// Key: Gallery
      ///
      /// Locales: en, tr
      var gallery: RswiftResources.StringResource { .init(key: "Gallery", tableName: "Localizable", source: source, developmentValue: "Gallery", comment: nil) }

      /// en translation: General
      ///
      /// Key: General
      ///
      /// Locales: en, tr, fr, ar
      var general: RswiftResources.StringResource { .init(key: "General", tableName: "Localizable", source: source, developmentValue: "General", comment: nil) }

      /// en translation: Genres
      ///
      /// Key: Genres
      ///
      /// Locales: en, tr, fr, ar
      var genres: RswiftResources.StringResource { .init(key: "Genres", tableName: "Localizable", source: source, developmentValue: "Genres", comment: nil) }

      /// en translation: Get Started
      ///
      /// Key: Get Started
      ///
      /// Locales: en, tr, fr, ar
      var getStarted: RswiftResources.StringResource { .init(key: "Get Started", tableName: "Localizable", source: source, developmentValue: "Get Started", comment: nil) }

      /// en translation: Get on to connect with fans, share your sounds, and grow your audience
      ///
      /// Key: Get on to connect with fans, share your sounds, and grow your audience
      ///
      /// Locales: en
      var getOnToConnectWithFansShareYourSoundsAndGrowYourAudience: RswiftResources.StringResource { .init(key: "Get on to connect with fans, share your sounds, and grow your audience", tableName: "Localizable", source: source, developmentValue: "Get on to connect with fans, share your sounds, and grow your audience", comment: nil) }

      /// en translation: Get the conversation started by leaving the first comment.
      ///
      /// Key: Get the conversation started by leaving the first comment.
      ///
      /// Locales: en, tr, fr, ar
      var getTheConversationStartedByLeavingTheFirstComment: RswiftResources.StringResource { .init(key: "Get the conversation started by leaving the first comment.", tableName: "Localizable", source: source, developmentValue: "Get the conversation started by leaving the first comment.", comment: nil) }

      /// en translation: Go Pro
      ///
      /// Key: Go Pro
      ///
      /// Locales: en, tr
      var goPro: RswiftResources.StringResource { .init(key: "Go Pro", tableName: "Localizable", source: source, developmentValue: "Go Pro", comment: nil) }

      /// en translation: Select your music preference
      ///
      /// Key: HWc-QI-abP.text
      ///
      /// Locales: en, tr, fr, ar
      var hWcQIAbPText: RswiftResources.StringResource { .init(key: "HWc-QI-abP.text", tableName: "Localizable", source: source, developmentValue: "Select your music preference", comment: nil) }

      /// en translation: Help
      ///
      /// Key: Help
      ///
      /// Locales: en, tr, fr, ar
      var help: RswiftResources.StringResource { .init(key: "Help", tableName: "Localizable", source: source, developmentValue: "Help", comment: nil) }

      /// en translation: Hot PlayList
      ///
      /// Key: Hot PlayList
      ///
      /// Locales: en, tr
      var hotPlayList: RswiftResources.StringResource { .init(key: "Hot PlayList", tableName: "Localizable", source: source, developmentValue: "Hot PlayList", comment: nil) }

      /// en translation: I don't like this song!!
      ///
      /// Key: I don't like this song!!
      ///
      /// Locales: en, tr
      var iDonTLikeThisSong: RswiftResources.StringResource { .init(key: "I don't like this song!!", tableName: "Localizable", source: source, developmentValue: "I don't like this song!!", comment: nil) }

      /// en translation: IP Address
      ///
      /// Key: IP Address
      ///
      /// Locales: en, tr
      var ipAddress: RswiftResources.StringResource { .init(key: "IP Address", tableName: "Localizable", source: source, developmentValue: "IP Address", comment: nil) }

      /// en translation: No Users Found
      ///
      /// Key: If you forget your password you can reset from here.
      ///
      /// Locales: en, tr, fr, ar
      var ifYouForgetYourPasswordYouCanResetFromHere: RswiftResources.StringResource { .init(key: "If you forget your password you can reset from here.", tableName: "Localizable", source: source, developmentValue: "No Users Found", comment: nil) }

      /// en translation: Import
      ///
      /// Key: Import
      ///
      /// Locales: en, tr
      var `import`: RswiftResources.StringResource { .init(key: "Import", tableName: "Localizable", source: source, developmentValue: "Import", comment: nil) }

      /// en translation: Information about your profile 
      ///
      /// Key: Information about your profile 
      ///
      /// Locales: en, tr, fr, ar
      var informationAboutYourProfile: RswiftResources.StringResource { .init(key: "Information about your profile ", tableName: "Localizable", source: source, developmentValue: "Information about your profile ", comment: nil) }

      /// en translation: Interest
      ///
      /// Key: Interest
      ///
      /// Locales: en, tr, fr, ar
      var interest: RswiftResources.StringResource { .init(key: "Interest", tableName: "Localizable", source: source, developmentValue: "Interest", comment: nil) }

      /// en translation: LIKED
      ///
      /// Key: LIKED
      ///
      /// Locales: en, tr
      var likeD: RswiftResources.StringResource { .init(key: "LIKED", tableName: "Localizable", source: source, developmentValue: "LIKED", comment: nil) }

      /// en translation: LOGIN
      ///
      /// Key: LOGIN
      ///
      /// Locales: en, tr, fr, ar
      var logiN: RswiftResources.StringResource { .init(key: "LOGIN", tableName: "Localizable", source: source, developmentValue: "LOGIN", comment: nil) }

      /// en translation: Label
      ///
      /// Key: Label
      ///
      /// Locales: en, tr, fr, ar
      var label: RswiftResources.StringResource { .init(key: "Label", tableName: "Localizable", source: source, developmentValue: "Label", comment: nil) }

      /// en translation: Last Name
      ///
      /// Key: Last Name
      ///
      /// Locales: en, tr
      var lastName: RswiftResources.StringResource { .init(key: "Last Name", tableName: "Localizable", source: source, developmentValue: "Last Name", comment: nil) }

      /// en translation: Last seen
      ///
      /// Key: Last seen
      ///
      /// Locales: en, tr
      var lastSeen: RswiftResources.StringResource { .init(key: "Last seen", tableName: "Localizable", source: source, developmentValue: "Last seen", comment: nil) }

      /// en translation: Latest Download
      ///
      /// Key: Latest Download
      ///
      /// Locales: en, tr
      var latestDownload: RswiftResources.StringResource { .init(key: "Latest Download", tableName: "Localizable", source: source, developmentValue: "Latest Download", comment: nil) }

      /// en translation: Latest Songs
      ///
      /// Key: Latest Songs
      ///
      /// Locales: en, tr, fr, ar
      var latestSongs: RswiftResources.StringResource { .init(key: "Latest Songs", tableName: "Localizable", source: source, developmentValue: "Latest Songs", comment: nil) }

      /// en translation: Library
      ///
      /// Key: Library
      ///
      /// Locales: en, tr, fr, ar
      var library: RswiftResources.StringResource { .init(key: "Library", tableName: "Localizable", source: source, developmentValue: "Library", comment: nil) }

      /// en translation: Light
      ///
      /// Key: Light
      ///
      /// Locales: en, tr
      var light: RswiftResources.StringResource { .init(key: "Light", tableName: "Localizable", source: source, developmentValue: "Light", comment: nil) }

      /// en translation: Liked
      ///
      /// Key: Liked
      ///
      /// Locales: en, tr
      var liked: RswiftResources.StringResource { .init(key: "Liked", tableName: "Localizable", source: source, developmentValue: "Liked", comment: nil) }

      /// en translation: Listen Music Everywhere,Anytime
      ///
      /// Key: Listen Music Everywhere,Anytime
      ///
      /// Locales: en
      var listenMusicEverywhereAnytime: RswiftResources.StringResource { .init(key: "Listen Music Everywhere,Anytime", tableName: "Localizable", source: source, developmentValue: "Listen Music Everywhere,Anytime", comment: nil) }

      /// en translation: Loading Profile...
      ///
      /// Key: Loading Profile...
      ///
      /// Locales: en, tr, fr, ar
      var loadingProfile: RswiftResources.StringResource { .init(key: "Loading Profile...", tableName: "Localizable", source: source, developmentValue: "Loading Profile...", comment: nil) }

      /// en translation: Loading...
      ///
      /// Key: Loading...
      ///
      /// Locales: en, tr
      var loading: RswiftResources.StringResource { .init(key: "Loading...", tableName: "Localizable", source: source, developmentValue: "Loading...", comment: nil) }

      /// en translation: Log In
      ///
      /// Key: Log In
      ///
      /// Locales: en, tr, fr, ar
      var logIn: RswiftResources.StringResource { .init(key: "Log In", tableName: "Localizable", source: source, developmentValue: "Log In", comment: nil) }

      /// en translation: Login
      ///
      /// Key: Login
      ///
      /// Locales: en, tr
      var login: RswiftResources.StringResource { .init(key: "Login", tableName: "Localizable", source: source, developmentValue: "Login", comment: nil) }

      /// en translation: Logout
      ///
      /// Key: Logout
      ///
      /// Locales: en, tr, fr, ar
      var logout: RswiftResources.StringResource { .init(key: "Logout", tableName: "Localizable", source: source, developmentValue: "Logout", comment: nil) }

      /// en translation: Male
      ///
      /// Key: Male
      ///
      /// Locales: en, tr, fr, ar
      var male: RswiftResources.StringResource { .init(key: "Male", tableName: "Localizable", source: source, developmentValue: "Male", comment: nil) }

      /// en translation: Manage Sessions
      ///
      /// Key: Manage Sessions
      ///
      /// Locales: en, tr
      var manageSessions: RswiftResources.StringResource { .init(key: "Manage Sessions", tableName: "Localizable", source: source, developmentValue: "Manage Sessions", comment: nil) }

      /// en translation: Music
      ///
      /// Key: Music
      ///
      /// Locales: en, tr
      var music: RswiftResources.StringResource { .init(key: "Music", tableName: "Localizable", source: source, developmentValue: "Music", comment: nil) }

      /// en translation: My Account
      ///
      /// Key: My Account
      ///
      /// Locales: en, tr, fr, ar
      var myAccount: RswiftResources.StringResource { .init(key: "My Account", tableName: "Localizable", source: source, developmentValue: "My Account", comment: nil) }

      /// en translation: My Playlist
      ///
      /// Key: My Playlist
      ///
      /// Locales: en, tr
      var myPlaylist: RswiftResources.StringResource { .init(key: "My Playlist", tableName: "Localizable", source: source, developmentValue: "My Playlist", comment: nil) }

      /// en translation: My Playlists
      ///
      /// Key: My Playlists
      ///
      /// Locales: en, tr, fr, ar
      var myPlaylists: RswiftResources.StringResource { .init(key: "My Playlists", tableName: "Localizable", source: source, developmentValue: "My Playlists", comment: nil) }

      /// en translation: NO
      ///
      /// Key: NO
      ///
      /// Locales: en, tr, fr, ar
      var nO: RswiftResources.StringResource { .init(key: "NO", tableName: "Localizable", source: source, developmentValue: "NO", comment: nil) }

      /// en translation: New Password
      ///
      /// Key: New Password
      ///
      /// Locales: en, tr, fr, ar
      var newPassword: RswiftResources.StringResource { .init(key: "New Password", tableName: "Localizable", source: source, developmentValue: "New Password", comment: nil) }

      /// en translation: New Releases 
      ///
      /// Key: New Releases 
      ///
      /// Locales: en, tr, fr, ar
      var newReleases: RswiftResources.StringResource { .init(key: "New Releases ", tableName: "Localizable", source: source, developmentValue: "New Releases ", comment: nil) }

      /// en translation: New sounds released recently
      ///
      /// Key: New sounds released recently
      ///
      /// Locales: en, tr, fr, ar
      var newSoundsReleasedRecently: RswiftResources.StringResource { .init(key: "New sounds released recently", tableName: "Localizable", source: source, developmentValue: "New sounds released recently", comment: nil) }

      /// en translation: Night Mode
      ///
      /// Key: Night Mode
      ///
      /// Locales: en, tr, fr, ar
      var nightMode: RswiftResources.StringResource { .init(key: "Night Mode", tableName: "Localizable", source: source, developmentValue: "Night Mode", comment: nil) }

      /// en translation: No Comments Yet
      ///
      /// Key: No Comments Yet
      ///
      /// Locales: en, tr, fr, ar
      var noCommentsYet: RswiftResources.StringResource { .init(key: "No Comments Yet", tableName: "Localizable", source: source, developmentValue: "No Comments Yet", comment: nil) }

      /// en translation: No Users Found
      ///
      /// Key: No Users Found
      ///
      /// Locales: en, tr, fr, ar
      var noUsersFound: RswiftResources.StringResource { .init(key: "No Users Found", tableName: "Localizable", source: source, developmentValue: "No Users Found", comment: nil) }

      /// en translation: Notification
      ///
      /// Key: Notification
      ///
      /// Locales: en, tr
      var notification: RswiftResources.StringResource { .init(key: "Notification", tableName: "Localizable", source: source, developmentValue: "Notification", comment: nil) }

      /// en translation: OK
      ///
      /// Key: OK
      ///
      /// Locales: en, tr, fr, ar
      var oK: RswiftResources.StringResource { .init(key: "OK", tableName: "Localizable", source: source, developmentValue: "OK", comment: nil) }

      /// en translation: PLAYLIST
      ///
      /// Key: PLAYLIST
      ///
      /// Locales: en, tr
      var playlisT: RswiftResources.StringResource { .init(key: "PLAYLIST", tableName: "Localizable", source: source, developmentValue: "PLAYLIST", comment: nil) }

      /// en translation: Password
      ///
      /// Key: Password
      ///
      /// Locales: en, tr, fr, ar
      var password: RswiftResources.StringResource { .init(key: "Password", tableName: "Localizable", source: source, developmentValue: "Password", comment: nil) }

      /// en translation: Password do not match.
      ///
      /// Key: Password do not match.
      ///
      /// Locales: en, tr
      var passwordDoNotMatch: RswiftResources.StringResource { .init(key: "Password do not match.", tableName: "Localizable", source: source, developmentValue: "Password do not match.", comment: nil) }

      /// en translation: PayPal
      ///
      /// Key: PayPal
      ///
      /// Locales: en, tr
      var payPal: RswiftResources.StringResource { .init(key: "PayPal", tableName: "Localizable", source: source, developmentValue: "PayPal", comment: nil) }

      /// en translation: Paypal
      ///
      /// Key: Paypal
      ///
      /// Locales: en, tr
      var paypal: RswiftResources.StringResource { .init(key: "Paypal", tableName: "Localizable", source: source, developmentValue: "Paypal", comment: nil) }

      /// en translation: Photo
      ///
      /// Key: Photo
      ///
      /// Locales: en, tr
      var photo: RswiftResources.StringResource { .init(key: "Photo", tableName: "Localizable", source: source, developmentValue: "Photo", comment: nil) }

      /// en translation: PlayList
      ///
      /// Key: PlayList
      ///
      /// Locales: en, tr
      var playList: RswiftResources.StringResource { .init(key: "PlayList", tableName: "Localizable", source: source, developmentValue: "PlayList", comment: nil) }

      /// en translation: Playlist
      ///
      /// Key: Playlist
      ///
      /// Locales: en, tr, fr, ar
      var playlist: RswiftResources.StringResource { .init(key: "Playlist", tableName: "Localizable", source: source, developmentValue: "Playlist", comment: nil) }

      /// en translation: Playlist Name
      ///
      /// Key: Playlist Name
      ///
      /// Locales: en, tr, fr, ar
      var playlistName: RswiftResources.StringResource { .init(key: "Playlist Name", tableName: "Localizable", source: source, developmentValue: "Playlist Name", comment: nil) }

      /// en translation: Playlist Name here 
      ///
      /// Key: Playlist Name here 
      ///
      /// Locales: en, tr, fr, ar
      var playlistNameHere: RswiftResources.StringResource { .init(key: "Playlist Name here ", tableName: "Localizable", source: source, developmentValue: "Playlist Name here ", comment: nil) }

      /// en translation: Please Verify your email
      ///
      /// Key: Please Verify your email
      ///
      /// Locales: en, tr
      var pleaseVerifyYourEmail: RswiftResources.StringResource { .init(key: "Please Verify your email", tableName: "Localizable", source: source, developmentValue: "Please Verify your email", comment: nil) }

      /// en translation: Please enter Current Password.
      ///
      /// Key: Please enter Current Password.
      ///
      /// Locales: en, tr
      var pleaseEnterCurrentPassword: RswiftResources.StringResource { .init(key: "Please enter Current Password.", tableName: "Localizable", source: source, developmentValue: "Please enter Current Password.", comment: nil) }

      /// en translation: Please enter New Password.
      ///
      /// Key: Please enter New Password.
      ///
      /// Locales: en, tr
      var pleaseEnterNewPassword: RswiftResources.StringResource { .init(key: "Please enter New Password.", tableName: "Localizable", source: source, developmentValue: "Please enter New Password.", comment: nil) }

      /// en translation: Please enter Repeat Password.
      ///
      /// Key: Please enter Repeat Password.
      ///
      /// Locales: en, tr
      var pleaseEnterRepeatPassword: RswiftResources.StringResource { .init(key: "Please enter Repeat Password.", tableName: "Localizable", source: source, developmentValue: "Please enter Repeat Password.", comment: nil) }

      /// en translation: Please enter code
      ///
      /// Key: Please enter code
      ///
      /// Locales: en, tr
      var pleaseEnterCode: RswiftResources.StringResource { .init(key: "Please enter code", tableName: "Localizable", source: source, developmentValue: "Please enter code", comment: nil) }

      /// en translation: Please enter username
      ///
      /// Key: Please enter username.
      ///
      /// Locales: en, tr
      var pleaseEnterUsername: RswiftResources.StringResource { .init(key: "Please enter username.", tableName: "Localizable", source: source, developmentValue: "Please enter username", comment: nil) }

      /// fr translation: Please enter your email address. We will send you a link to reset password. 
      ///
      /// Key: Please enter your email address. We will send you a link to reset password. 
      ///
      /// Locales: fr, ar
      var pleaseEnterYourEmailAddressWeWillSendYouALinkToResetPassword: RswiftResources.StringResource { .init(key: "Please enter your email address. We will send you a link to reset password. ", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Popular 
      ///
      /// Key: Popular 
      ///
      /// Locales: en, fr, ar
      var popular: RswiftResources.StringResource { .init(key: "Popular ", tableName: "Localizable", source: source, developmentValue: "Popular ", comment: nil) }

      /// en translation: Price
      ///
      /// Key: Price
      ///
      /// Locales: en, tr, fr, ar
      var price: RswiftResources.StringResource { .init(key: "Price", tableName: "Localizable", source: source, developmentValue: "Price", comment: nil) }

      /// en translation: Privacy
      ///
      /// Key: Privacy
      ///
      /// Locales: en, tr, fr, ar
      var privacy: RswiftResources.StringResource { .init(key: "Privacy", tableName: "Localizable", source: source, developmentValue: "Privacy", comment: nil) }

      /// en translation: Private
      ///
      /// Key: Private
      ///
      /// Locales: en, tr, fr, ar
      var `private`: RswiftResources.StringResource { .init(key: "Private", tableName: "Localizable", source: source, developmentValue: "Private", comment: nil) }

      /// en translation: Pro Member
      ///
      /// Key: Pro Member
      ///
      /// Locales: en
      var proMember: RswiftResources.StringResource { .init(key: "Pro Member", tableName: "Localizable", source: source, developmentValue: "Pro Member", comment: nil) }

      /// en translation: Pro badge
      ///
      /// Key: Pro badge
      ///
      /// Locales: en, tr
      var proBadge: RswiftResources.StringResource { .init(key: "Pro badge", tableName: "Localizable", source: source, developmentValue: "Pro badge", comment: nil) }

      /// en translation: Profile
      ///
      /// Key: Profile
      ///
      /// Locales: en, tr
      var profile: RswiftResources.StringResource { .init(key: "Profile", tableName: "Localizable", source: source, developmentValue: "Profile", comment: nil) }

      /// en translation: Profile Image has been uploaded successfully..
      ///
      /// Key: Profile Image has been uploaded successfully..
      ///
      /// Locales: en, tr
      var profileImageHasBeenUploadedSuccessfully: RswiftResources.StringResource { .init(key: "Profile Image has been uploaded successfully..", tableName: "Localizable", source: source, developmentValue: "Profile Image has been uploaded successfully..", comment: nil) }

      /// en translation: Public
      ///
      /// Key: Public
      ///
      /// Locales: en, tr, fr, ar
      var `public`: RswiftResources.StringResource { .init(key: "Public", tableName: "Localizable", source: source, developmentValue: "Public", comment: nil) }

      /// en translation: Pull to refresh
      ///
      /// Key: Pull to refresh
      ///
      /// Locales: en, tr
      var pullToRefresh: RswiftResources.StringResource { .init(key: "Pull to refresh", tableName: "Localizable", source: source, developmentValue: "Pull to refresh", comment: nil) }

      /// en translation: Purchases
      ///
      /// Key: Purchases
      ///
      /// Locales: en, tr
      var purchases: RswiftResources.StringResource { .init(key: "Purchases", tableName: "Localizable", source: source, developmentValue: "Purchases", comment: nil) }

      /// en translation: REGISTER
      ///
      /// Key: REGISTER
      ///
      /// Locales: en, tr, fr, ar
      var registeR: RswiftResources.StringResource { .init(key: "REGISTER", tableName: "Localizable", source: source, developmentValue: "REGISTER", comment: nil) }

      /// en translation: REMOVE ACCOUNT
      ///
      /// Key: REMOVE ACCOUNT
      ///
      /// Locales: en, tr, fr, ar
      var removeaccounT: RswiftResources.StringResource { .init(key: "REMOVE ACCOUNT", tableName: "Localizable", source: source, developmentValue: "REMOVE ACCOUNT", comment: nil) }

      /// fr translation: Recently Played >
      ///
      /// Key: Recently Played >
      ///
      /// Locales: fr, ar
      var recentlyPlayed: RswiftResources.StringResource { .init(key: "Recently Played >", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Register
      ///
      /// Key: Register
      ///
      /// Locales: en, tr, fr, ar
      var register: RswiftResources.StringResource { .init(key: "Register", tableName: "Localizable", source: source, developmentValue: "Register", comment: nil) }

      /// en translation: Repeat Password
      ///
      /// Key: Repeat Password
      ///
      /// Locales: en, tr, fr, ar
      var repeatPassword: RswiftResources.StringResource { .init(key: "Repeat Password", tableName: "Localizable", source: source, developmentValue: "Repeat Password", comment: nil) }

      /// en translation: Report This Song
      ///
      /// Key: Report This Song
      ///
      /// Locales: en, tr, fr, ar
      var reportThisSong: RswiftResources.StringResource { .init(key: "Report This Song", tableName: "Localizable", source: source, developmentValue: "Report This Song", comment: nil) }

      /// en translation: SKIP
      ///
      /// Key: SKIP
      ///
      /// Locales: en, tr
      var skiP: RswiftResources.StringResource { .init(key: "SKIP", tableName: "Localizable", source: source, developmentValue: "SKIP", comment: nil) }

      /// en translation: SONGS
      ///
      /// Key: SONGS
      ///
      /// Locales: en, tr
      var songS: RswiftResources.StringResource { .init(key: "SONGS", tableName: "Localizable", source: source, developmentValue: "SONGS", comment: nil) }

      /// en translation: STORE
      ///
      /// Key: STORE
      ///
      /// Locales: en, tr
      var storE: RswiftResources.StringResource { .init(key: "STORE", tableName: "Localizable", source: source, developmentValue: "STORE", comment: nil) }

      /// en translation: Sad No Result
      ///
      /// Key: Sad No Result
      ///
      /// Locales: en, tr, fr, ar
      var sadNoResult: RswiftResources.StringResource { .init(key: "Sad No Result", tableName: "Localizable", source: source, developmentValue: "Sad No Result", comment: nil) }

      /// en translation: Search Nearby
      ///
      /// Key: Search Nearby
      ///
      /// Locales: en, tr
      var searchNearby: RswiftResources.StringResource { .init(key: "Search Nearby", tableName: "Localizable", source: source, developmentValue: "Search Nearby", comment: nil) }

      /// en translation: Search Random
      ///
      /// Key: Search Random
      ///
      /// Locales: en, tr, fr, ar
      var searchRandom: RswiftResources.StringResource { .init(key: "Search Random", tableName: "Localizable", source: source, developmentValue: "Search Random", comment: nil) }

      /// en translation: Search...
      ///
      /// Key: Search...
      ///
      /// Locales: en, tr
      var search: RswiftResources.StringResource { .init(key: "Search...", tableName: "Localizable", source: source, developmentValue: "Search...", comment: nil) }

      /// en translation: Security
      ///
      /// Key: Security
      ///
      /// Locales: en, tr, fr, ar
      var security: RswiftResources.StringResource { .init(key: "Security", tableName: "Localizable", source: source, developmentValue: "Security", comment: nil) }

      /// en translation: Select
      ///
      /// Key: Select
      ///
      /// Locales: en, tr
      var select: RswiftResources.StringResource { .init(key: "Select", tableName: "Localizable", source: source, developmentValue: "Select", comment: nil) }

      /// en translation: Select All
      ///
      /// Key: Select All
      ///
      /// Locales: en, tr, fr, ar
      var selectAll: RswiftResources.StringResource { .init(key: "Select All", tableName: "Localizable", source: source, developmentValue: "Select All", comment: nil) }

      /// en translation: Select Genre
      ///
      /// Key: Select Genre
      ///
      /// Locales: en, tr
      var selectGenre: RswiftResources.StringResource { .init(key: "Select Genre", tableName: "Localizable", source: source, developmentValue: "Select Genre", comment: nil) }

      /// en translation: Select Payment Method
      ///
      /// Key: Select Payment Method
      ///
      /// Locales: en, tr
      var selectPaymentMethod: RswiftResources.StringResource { .init(key: "Select Payment Method", tableName: "Localizable", source: source, developmentValue: "Select Payment Method", comment: nil) }

      /// en translation: Select Pictures
      ///
      /// Key: Select Pictures
      ///
      /// Locales: en, tr, fr, ar
      var selectPictures: RswiftResources.StringResource { .init(key: "Select Pictures", tableName: "Localizable", source: source, developmentValue: "Select Pictures", comment: nil) }

      /// en translation: Select Source
      ///
      /// Key: Select Source
      ///
      /// Locales: en, tr
      var selectSource: RswiftResources.StringResource { .init(key: "Select Source", tableName: "Localizable", source: source, developmentValue: "Select Source", comment: nil) }

      /// en translation: Select Theme
      ///
      /// Key: Select Theme
      ///
      /// Locales: en, tr
      var selectTheme: RswiftResources.StringResource { .init(key: "Select Theme", tableName: "Localizable", source: source, developmentValue: "Select Theme", comment: nil) }

      /// en translation: Select Your Music Preference
      ///
      /// Key: Select Your Music Preference
      ///
      /// Locales: en, tr
      var selectYourMusicPreference: RswiftResources.StringResource { .init(key: "Select Your Music Preference", tableName: "Localizable", source: source, developmentValue: "Select Your Music Preference", comment: nil) }

      /// en translation: Select a playlist
      ///
      /// Key: Select a playlist
      ///
      /// Locales: en, tr, fr, ar
      var selectAPlaylist: RswiftResources.StringResource { .init(key: "Select a playlist", tableName: "Localizable", source: source, developmentValue: "Select a playlist", comment: nil) }

      /// en translation: Select your most favorite genres
      ///
      /// Key: Select your most favorite genres
      ///
      /// Locales: en, tr, fr, ar
      var selectYourMostFavoriteGenres: RswiftResources.StringResource { .init(key: "Select your most favorite genres", tableName: "Localizable", source: source, developmentValue: "Select your most favorite genres", comment: nil) }

      /// en translation: Send
      ///
      /// Key: Send
      ///
      /// Locales: en, tr, fr, ar
      var send: RswiftResources.StringResource { .init(key: "Send", tableName: "Localizable", source: source, developmentValue: "Send", comment: nil) }

      /// fr translation: Settings 
      ///
      /// Key: Settings 
      ///
      /// Locales: fr, ar
      var settings: RswiftResources.StringResource { .init(key: "Settings ", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Settings successfully updated!
      ///
      /// Key: Settings successfully updated!
      ///
      /// Locales: en, tr
      var settingsSuccessfullyUpdated: RswiftResources.StringResource { .init(key: "Settings successfully updated!", tableName: "Localizable", source: source, developmentValue: "Settings successfully updated!", comment: nil) }

      /// en translation: Share
      ///
      /// Key: Share
      ///
      /// Locales: en, tr, fr, ar
      var share: RswiftResources.StringResource { .init(key: "Share", tableName: "Localizable", source: source, developmentValue: "Share", comment: nil) }

      /// en translation: Shared
      ///
      /// Key: Shared
      ///
      /// Locales: en, tr
      var shared: RswiftResources.StringResource { .init(key: "Shared", tableName: "Localizable", source: source, developmentValue: "Shared", comment: nil) }

      /// en translation: Sign Up
      ///
      /// Key: Sign Up
      ///
      /// Locales: en, tr, fr, ar
      var signUp: RswiftResources.StringResource { .init(key: "Sign Up", tableName: "Localizable", source: source, developmentValue: "Sign Up", comment: nil) }

      /// en translation: Sign in to access song that you have liked or saved
      ///
      /// Key: Sign in to access song that you have liked or saved
      ///
      /// Locales: en, tr
      var signInToAccessSongThatYouHaveLikedOrSaved: RswiftResources.StringResource { .init(key: "Sign in to access song that you have liked or saved", tableName: "Localizable", source: source, developmentValue: "Sign in to access song that you have liked or saved", comment: nil) }

      /// en translation: Sign in with Google
      ///
      /// Key: Sign in with Google
      ///
      /// Locales: en, tr, fr, ar
      var signInWithGoogle: RswiftResources.StringResource { .init(key: "Sign in with Google", tableName: "Localizable", source: source, developmentValue: "Sign in with Google", comment: nil) }

      /// en translation: Song Title
      ///
      /// Key: Song Title
      ///
      /// Locales: en, tr, fr, ar
      var songTitle: RswiftResources.StringResource { .init(key: "Song Title", tableName: "Localizable", source: source, developmentValue: "Song Title", comment: nil) }

      /// en translation: Song has been added in playlist
      ///
      /// Key: Song has been added in playlist
      ///
      /// Locales: en, tr
      var songHasBeenAddedInPlaylist: RswiftResources.StringResource { .init(key: "Song has been added in playlist", tableName: "Localizable", source: source, developmentValue: "Song has been added in playlist", comment: nil) }

      /// en translation: Songs
      ///
      /// Key: Songs
      ///
      /// Locales: en, tr, fr, ar
      var songs: RswiftResources.StringResource { .init(key: "Songs", tableName: "Localizable", source: source, developmentValue: "Songs", comment: nil) }

      /// en translation: Sorry you can not continue, you must log in and enjoy access to everything you want
      ///
      /// Key: Sorry you can not continue, you must log in and enjoy access to everything you want
      ///
      /// Locales: en, tr
      var sorryYouCanNotContinueYouMustLogInAndEnjoyAccessToEverythingYouWant: RswiftResources.StringResource { .init(key: "Sorry you can not continue, you must log in and enjoy access to everything you want", tableName: "Localizable", source: source, developmentValue: "Sorry you can not continue, you must log in and enjoy access to everything you want", comment: nil) }

      /// en translation: Spotlight your songs(featured)
      ///
      /// Key: Spotlight your songs(featured)
      ///
      /// Locales: en, tr
      var spotlightYourSongsFeatured: RswiftResources.StringResource { .init(key: "Spotlight your songs(featured)", tableName: "Localizable", source: source, developmentValue: "Spotlight your songs(featured)", comment: nil) }

      /// en translation: Store
      ///
      /// Key: Store
      ///
      /// Locales: en, tr, fr, ar
      var store: RswiftResources.StringResource { .init(key: "Store", tableName: "Localizable", source: source, developmentValue: "Store", comment: nil) }

      /// en translation: Success
      ///
      /// Key: Success
      ///
      /// Locales: en, tr
      var success: RswiftResources.StringResource { .init(key: "Success", tableName: "Localizable", source: source, developmentValue: "Success", comment: nil) }

      /// en translation: Support
      ///
      /// Key: Support
      ///
      /// Locales: en, tr, fr, ar
      var support: RswiftResources.StringResource { .init(key: "Support", tableName: "Localizable", source: source, developmentValue: "Support", comment: nil) }

      /// en translation: Swipe Cards
      ///
      /// Key: Swipe Cards
      ///
      /// Locales: en, tr
      var swipeCards: RswiftResources.StringResource { .init(key: "Swipe Cards", tableName: "Localizable", source: source, developmentValue: "Swipe Cards", comment: nil) }

      /// en translation: Swipe cards right and left if you like or dislike someone
      ///
      /// Key: Swipe cards right and left if you like or dislike someone
      ///
      /// Locales: en, tr
      var swipeCardsRightAndLeftIfYouLikeOrDislikeSomeone: RswiftResources.StringResource { .init(key: "Swipe cards right and left if you like or dislike someone", tableName: "Localizable", source: source, developmentValue: "Swipe cards right and left if you like or dislike someone", comment: nil) }

      /// en translation: Tag(s)
      ///
      /// Key: Tag(s)
      ///
      /// Locales: en, tr, fr, ar
      var tagS: RswiftResources.StringResource { .init(key: "Tag(s)", tableName: "Localizable", source: source, developmentValue: "Tag(s)", comment: nil) }

      /// en translation: Text Copied to clipboard
      ///
      /// Key: Text Copied to clipboard
      ///
      /// Locales: en, tr
      var textCopiedToClipboard: RswiftResources.StringResource { .init(key: "Text Copied to clipboard", tableName: "Localizable", source: source, developmentValue: "Text Copied to clipboard", comment: nil) }

      /// en translation: Text copy to clipboad
      ///
      /// Key: Text copy to clipboad
      ///
      /// Locales: en, tr
      var textCopyToClipboad: RswiftResources.StringResource { .init(key: "Text copy to clipboad", tableName: "Localizable", source: source, developmentValue: "Text copy to clipboad", comment: nil) }

      /// en translation:  
      ///
      /// Key: The song has been reported
      ///
      /// Locales: en, tr
      var theSongHasBeenReported: RswiftResources.StringResource { .init(key: "The song has been reported", tableName: "Localizable", source: source, developmentValue: " ", comment: nil) }

      /// en translation: Theme
      ///
      /// Key: Theme
      ///
      /// Locales: en, tr
      var theme: RswiftResources.StringResource { .init(key: "Theme", tableName: "Localizable", source: source, developmentValue: "Theme", comment: nil) }

      /// en translation: There Are no Articles yet
      ///
      /// Key: There Are no Articles yet
      ///
      /// Locales: en, tr
      var thereAreNoArticlesYet: RswiftResources.StringResource { .init(key: "There Are no Articles yet", tableName: "Localizable", source: source, developmentValue: "There Are no Articles yet", comment: nil) }

      /// en translation: There are no Store songs uploaded
      ///
      /// Key: There are no Store songs uploaded
      ///
      /// Locales: en, tr, fr, ar
      var thereAreNoStoreSongsUploaded: RswiftResources.StringResource { .init(key: "There are no Store songs uploaded", tableName: "Localizable", source: source, developmentValue: "There are no Store songs uploaded", comment: nil) }

      /// en translation: There are no Top songs uploaded
      ///
      /// Key: There are no Top songs uploaded
      ///
      /// Locales: en, tr, fr, ar
      var thereAreNoTopSongsUploaded: RswiftResources.StringResource { .init(key: "There are no Top songs uploaded", tableName: "Localizable", source: source, developmentValue: "There are no Top songs uploaded", comment: nil) }

      /// en translation: There are no activity by this user 
      ///
      /// Key: There are no activity by this user 
      ///
      /// Locales: en, tr, fr, ar
      var thereAreNoActivityByThisUser: RswiftResources.StringResource { .init(key: "There are no activity by this user ", tableName: "Localizable", source: source, developmentValue: "There are no activity by this user ", comment: nil) }

      /// en translation: There are no latest songs uploaded
      ///
      /// Key: There are no latest songs uploaded
      ///
      /// Locales: en, tr, fr, ar
      var thereAreNoLatestSongsUploaded: RswiftResources.StringResource { .init(key: "There are no latest songs uploaded", tableName: "Localizable", source: source, developmentValue: "There are no latest songs uploaded", comment: nil) }

      /// en translation: There are no songs
      ///
      /// Key: There are no songs
      ///
      /// Locales: en, tr, fr, ar
      var thereAreNoSongs: RswiftResources.StringResource { .init(key: "There are no songs", tableName: "Localizable", source: source, developmentValue: "There are no songs", comment: nil) }

      /// en translation: There are no songs in this album
      ///
      /// Key: There are no songs in this album
      ///
      /// Locales: en, tr, fr, ar
      var thereAreNoSongsInThisAlbum: RswiftResources.StringResource { .init(key: "There are no songs in this album", tableName: "Localizable", source: source, developmentValue: "There are no songs in this album", comment: nil) }

      /// en translation: There are no users
      ///
      /// Key: There are no users
      ///
      /// Locales: en, tr, fr, ar
      var thereAreNoUsers: RswiftResources.StringResource { .init(key: "There are no users", tableName: "Localizable", source: source, developmentValue: "There are no users", comment: nil) }

      /// en translation: There is no Notification 
      ///
      /// Key: There is no Notification 
      ///
      /// Locales: en, tr, fr, ar
      var thereIsNoNotification: RswiftResources.StringResource { .init(key: "There is no Notification ", tableName: "Localizable", source: source, developmentValue: "There is no Notification ", comment: nil) }

      /// en translation: There is no song in this playlist 
      ///
      /// Key: There is no song in this playlist 
      ///
      /// Locales: en, tr, fr, ar
      var thereIsNoSongInThisPlaylist: RswiftResources.StringResource { .init(key: "There is no song in this playlist ", tableName: "Localizable", source: source, developmentValue: "There is no song in this playlist ", comment: nil) }

      /// en translation: To log in, you need to verify  your identity.
      ///
      /// Key: To log in, you need to verify  your identity.
      ///
      /// Locales: en, tr
      var toLogInYouNeedToVerifyYourIdentity: RswiftResources.StringResource { .init(key: "To log in, you need to verify  your identity.", tableName: "Localizable", source: source, developmentValue: "To log in, you need to verify  your identity.", comment: nil) }

      /// fr translation: Top Albums 
      ///
      /// Key: Top Albums 
      ///
      /// Locales: fr, ar
      var topAlbums: RswiftResources.StringResource { .init(key: "Top Albums ", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Top Listings
      ///
      /// Key: Top Listings
      ///
      /// Locales: en, tr
      var topListings: RswiftResources.StringResource { .init(key: "Top Listings", tableName: "Localizable", source: source, developmentValue: "Top Listings", comment: nil) }

      /// en translation: Tracks
      ///
      /// Key: Tracks
      ///
      /// Locales: en, tr, fr, ar
      var tracks: RswiftResources.StringResource { .init(key: "Tracks", tableName: "Localizable", source: source, developmentValue: "Tracks", comment: nil) }

      /// en translation: Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.
      ///
      /// Key: Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.
      ///
      /// Locales: en, tr
      var turnOn2StepLoginToLevelUpYourAccountSecurityOnceTurnedOnYouLlUseBothYourPasswordAndA6DigitSecurityCodeSendToYourPhoneOrEmailToLogIn: RswiftResources.StringResource { .init(key: "Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.", tableName: "Localizable", source: source, developmentValue: "Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.", comment: nil) }

      /// en translation: UNBLOCK
      ///
      /// Key: UNBLOCK
      ///
      /// Locales: en, tr
      var unblocK: RswiftResources.StringResource { .init(key: "UNBLOCK", tableName: "Localizable", source: source, developmentValue: "UNBLOCK", comment: nil) }

      /// en translation: Upload Album
      ///
      /// Key: Upload Album
      ///
      /// Locales: en, tr
      var uploadAlbum: RswiftResources.StringResource { .init(key: "Upload Album", tableName: "Localizable", source: source, developmentValue: "Upload Album", comment: nil) }

      /// en translation: Upload Single Song
      ///
      /// Key: Upload Single Song
      ///
      /// Locales: en, tr
      var uploadSingleSong: RswiftResources.StringResource { .init(key: "Upload Single Song", tableName: "Localizable", source: source, developmentValue: "Upload Single Song", comment: nil) }

      /// en translation: Upload unlimited songs
      ///
      /// Key: Upload unlimited songs
      ///
      /// Locales: en, tr
      var uploadUnlimitedSongs: RswiftResources.StringResource { .init(key: "Upload unlimited songs", tableName: "Localizable", source: source, developmentValue: "Upload unlimited songs", comment: nil) }

      /// en translation: User has been Followed
      ///
      /// Key: User has been Followed
      ///
      /// Locales: en, tr
      var userHasBeenFollowed: RswiftResources.StringResource { .init(key: "User has been Followed", tableName: "Localizable", source: source, developmentValue: "User has been Followed", comment: nil) }

      /// en translation: User has been unfollowed
      ///
      /// Key: User has been unfollowed
      ///
      /// Locales: en, tr
      var userHasBeenUnfollowed: RswiftResources.StringResource { .init(key: "User has been unfollowed", tableName: "Localizable", source: source, developmentValue: "User has been unfollowed", comment: nil) }

      /// en translation: VERIFY
      ///
      /// Key: VERIFY
      ///
      /// Locales: en, tr
      var verifY: RswiftResources.StringResource { .init(key: "VERIFY", tableName: "Localizable", source: source, developmentValue: "VERIFY", comment: nil) }

      /// en translation: Views
      ///
      /// Key: Views
      ///
      /// Locales: en, tr
      var views: RswiftResources.StringResource { .init(key: "Views", tableName: "Localizable", source: source, developmentValue: "Views", comment: nil) }

      /// en translation: Warning
      ///
      /// Key: Warning
      ///
      /// Locales: en, tr, fr, ar
      var warning: RswiftResources.StringResource { .init(key: "Warning", tableName: "Localizable", source: source, developmentValue: "Warning", comment: nil) }

      /// en translation: We cannot find keyword you are searching for maybe a little spelling mistake?
      ///
      /// Key: We cannot find keyword you are searching for maybe a little spelling mistake?
      ///
      /// Locales: en, tr, fr, ar
      var weCannotFindKeywordYouAreSearchingForMaybeALittleSpellingMistake: RswiftResources.StringResource { .init(key: "We cannot find keyword you are searching for maybe a little spelling mistake?", tableName: "Localizable", source: source, developmentValue: "We cannot find keyword you are searching for maybe a little spelling mistake?", comment: nil) }

      /// en translation: We have sent you the confirmation code to your email address.
      ///
      /// Key: We have sent you the confirmation code to your email address.
      ///
      /// Locales: en, tr
      var weHaveSentYouTheConfirmationCodeToYourEmailAddress: RswiftResources.StringResource { .init(key: "We have sent you the confirmation code to your email address.", tableName: "Localizable", source: source, developmentValue: "We have sent you the confirmation code to your email address.", comment: nil) }

      /// en translation: Website
      ///
      /// Key: Website
      ///
      /// Locales: en, tr, fr, ar
      var website: RswiftResources.StringResource { .init(key: "Website", tableName: "Localizable", source: source, developmentValue: "Website", comment: nil) }

      /// en translation: Widthdrawals
      ///
      /// Key: Widthdrawals
      ///
      /// Locales: en, tr
      var widthdrawals: RswiftResources.StringResource { .init(key: "Widthdrawals", tableName: "Localizable", source: source, developmentValue: "Widthdrawals", comment: nil) }

      /// en translation: Withdrawals
      ///
      /// Key: Withdrawals
      ///
      /// Locales: en, tr
      var withdrawals: RswiftResources.StringResource { .init(key: "Withdrawals", tableName: "Localizable", source: source, developmentValue: "Withdrawals", comment: nil) }

      /// en translation: YES
      ///
      /// Key: YES
      ///
      /// Locales: en, tr, fr, ar
      var yeS: RswiftResources.StringResource { .init(key: "YES", tableName: "Localizable", source: source, developmentValue: "YES", comment: nil) }

      /// en translation: Yes, I want to delete username parmanently from DeepSound Account.
      ///
      /// Key: Yes, I want to delete username parmanently from DeepSound Account.
      ///
      /// Locales: en, tr, fr, ar
      var yesIWantToDeleteUsernameParmanentlyFromDeepSoundAccount: RswiftResources.StringResource { .init(key: "Yes, I want to delete username parmanently from DeepSound Account.", tableName: "Localizable", source: source, developmentValue: "Yes, I want to delete username parmanently from DeepSound Account.", comment: nil) }

      /// en translation: You can change these later
      ///
      /// Key: You can change these later
      ///
      /// Locales: en, tr, fr, ar
      var youCanChangeTheseLater: RswiftResources.StringResource { .init(key: "You can change these later", tableName: "Localizable", source: source, developmentValue: "You can change these later", comment: nil) }

      /// en translation: You cannot listen to this list until you purchase it
      ///
      /// Key: You cannot listen to this list until you purchase it
      ///
      /// Locales: en, tr
      var youCannotListenToThisListUntilYouPurchaseIt: RswiftResources.StringResource { .init(key: "You cannot listen to this list until you purchase it", tableName: "Localizable", source: source, developmentValue: "You cannot listen to this list until you purchase it", comment: nil) }

      /// en translation: You have no Playlists yet
      ///
      /// Key: You have no Playlists yet
      ///
      /// Locales: en, tr, fr, ar
      var youHaveNoPlaylistsYet: RswiftResources.StringResource { .init(key: "You have no Playlists yet", tableName: "Localizable", source: source, developmentValue: "You have no Playlists yet", comment: nil) }

      /// en translation: You have not download any song yet
      ///
      /// Key: You have not download any song yet
      ///
      /// Locales: en, tr, fr, ar
      var youHaveNotDownloadAnySongYet: RswiftResources.StringResource { .init(key: "You have not download any song yet", tableName: "Localizable", source: source, developmentValue: "You have not download any song yet", comment: nil) }

      /// en translation: You have not favorite any song yet
      ///
      /// Key: You have not favorite any song yet
      ///
      /// Locales: en, tr, fr, ar
      var youHaveNotFavoriteAnySongYet: RswiftResources.StringResource { .init(key: "You have not favorite any song yet", tableName: "Localizable", source: source, developmentValue: "You have not favorite any song yet", comment: nil) }

      /// en translation: You have not liked any song yet
      ///
      /// Key: You have not liked any song yet
      ///
      /// Locales: en, tr, fr, ar
      var youHaveNotLikedAnySongYet: RswiftResources.StringResource { .init(key: "You have not liked any song yet", tableName: "Localizable", source: source, developmentValue: "You have not liked any song yet", comment: nil) }

      /// en translation: You have not shared any song yet
      ///
      /// Key: You have not shared any song yet
      ///
      /// Locales: en, tr, fr, ar
      var youHaveNotSharedAnySongYet: RswiftResources.StringResource { .init(key: "You have not shared any song yet", tableName: "Localizable", source: source, developmentValue: "You have not shared any song yet", comment: nil) }

      /// en translation: You have not watched any song yet
      ///
      /// Key: You have not watched any song yet
      ///
      /// Locales: en, tr, fr, ar
      var youHaveNotWatchedAnySongYet: RswiftResources.StringResource { .init(key: "You have not watched any song yet", tableName: "Localizable", source: source, developmentValue: "You have not watched any song yet", comment: nil) }

      /// en translation: Your Puchased Album
      ///
      /// Key: Your Puchased Album
      ///
      /// Locales: en, tr
      var yourPuchasedAlbum: RswiftResources.StringResource { .init(key: "Your Puchased Album", tableName: "Localizable", source: source, developmentValue: "Your Puchased Album", comment: nil) }

      /// en translation: Continue with Facebook
      ///
      /// Key: ontinue with Facebook
      ///
      /// Locales: en, tr, fr, ar
      var ontinueWithFacebook: RswiftResources.StringResource { .init(key: "ontinue with Facebook", tableName: "Localizable", source: source, developmentValue: "Continue with Facebook", comment: nil) }

      /// en translation: unknown
      ///
      /// Key: unknown
      ///
      /// Locales: en, tr, fr, ar
      var unknown: RswiftResources.StringResource { .init(key: "unknown", tableName: "Localizable", source: source, developmentValue: "unknown", comment: nil) }

      /// en translation: you cannot follow to yourself!
      ///
      /// Key: you cannot follow to yourself!
      ///
      /// Locales: en, tr
      var youCannotFollowToYourself: RswiftResources.StringResource { .init(key: "you cannot follow to yourself!", tableName: "Localizable", source: source, developmentValue: "you cannot follow to yourself!", comment: nil) }

      /// en translation: About
      ///
      /// Key: yww-2u-HRV.text
      ///
      /// Locales: en, tr, fr, ar
      var yww2uHRVText: RswiftResources.StringResource { .init(key: "yww-2u-HRV.text", tableName: "Localizable", source: source, developmentValue: "About", comment: nil) }
    }
  }

  /// This `_R.image` struct is generated, and contains static references to 268 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `Bookmark`.
    var bookmark: ImageResource { .init(name: "Bookmark", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Category`.
    var category: ImageResource { .init(name: "Category", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `CircleLogo`.
    var circleLogo: ImageResource { .init(name: "CircleLogo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `DangerCircle`.
    var dangerCircle: ImageResource { .init(name: "DangerCircle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `EmptyData`.
    var emptyData: ImageResource { .init(name: "EmptyData", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Graph`.
    var graph: ImageResource { .init(name: "Graph", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Grey_Offline`.
    var grey_Offline: ImageResource { .init(name: "Grey_Offline", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Icon-App-83.5x83.5`.
    var iconApp835x835: ImageResource { .init(name: "Icon-App-83.5x83.5", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `IconGoogle`.
    var iconGoogle: ImageResource { .init(name: "IconGoogle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Icon_Edit`.
    var icon_Edit: ImageResource { .init(name: "Icon_Edit", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Image`.
    var image: ImageResource { .init(name: "Image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ImagePlacholder`.
    var imagePlacholder: ImageResource { .init(name: "ImagePlacholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ImagePlacholder_circle`.
    var imagePlacholder_circle: ImageResource { .init(name: "ImagePlacholder_circle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Location`.
    var location: ImageResource { .init(name: "Location", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Lock`.
    var lock: ImageResource { .init(name: "Lock", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `LoginImage`.
    var loginImage: ImageResource { .init(name: "LoginImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Logout`.
    var logout: ImageResource { .init(name: "Logout", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Message-1`.
    var message1: ImageResource { .init(name: "Message-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Music`.
    var music: ImageResource { .init(name: "Music", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Onboarding_icon1`.
    var onboarding_icon1: ImageResource { .init(name: "Onboarding_icon1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Onboarding_icon2`.
    var onboarding_icon2: ImageResource { .init(name: "Onboarding_icon2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Onboarding_icon3`.
    var onboarding_icon3: ImageResource { .init(name: "Onboarding_icon3", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Paper`.
    var paper: ImageResource { .init(name: "Paper", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `PremiumSubscription`.
    var premiumSubscription: ImageResource { .init(name: "PremiumSubscription", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Profile`.
    var profile: ImageResource { .init(name: "Profile", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Profilecover`.
    var profilecover: ImageResource { .init(name: "Profilecover", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ShieldDone`.
    var shieldDone: ImageResource { .init(name: "ShieldDone", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Star`.
    var star: ImageResource { .init(name: "Star", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Swap`.
    var swap: ImageResource { .init(name: "Swap", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `TickSquare`.
    var tickSquare: ImageResource { .init(name: "TickSquare", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `TimeSquare`.
    var timeSquare: ImageResource { .init(name: "TimeSquare", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Title`.
    var title: ImageResource { .init(name: "Title", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Wallet`.
    var wallet: ImageResource { .init(name: "Wallet", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `WhiteTick`.
    var whiteTick: ImageResource { .init(name: "WhiteTick", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `addImagepLace`.
    var addImagepLace: ImageResource { .init(name: "addImagepLace", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `album`.
    var album: ImageResource { .init(name: "album", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `applepay`.
    var applepay: ImageResource { .init(name: "applepay", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `backward`.
    var backward: ImageResource { .init(name: "backward", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `barlogo`.
    var barlogo: ImageResource { .init(name: "barlogo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bgCircles`.
    var bgCircles: ImageResource { .init(name: "bgCircles", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bgWalkthrough`.
    var bgWalkthrough: ImageResource { .init(name: "bgWalkthrough", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bgWalkthrough2`.
    var bgWalkthrough2: ImageResource { .init(name: "bgWalkthrough2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `blackdefault`.
    var blackdefault: ImageResource { .init(name: "blackdefault", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chatBackground`.
    var chatBackground: ImageResource { .init(name: "chatBackground", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chatIconImage`.
    var chatIconImage: ImageResource { .init(name: "chatIconImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `check`.
    var check: ImageResource { .init(name: "check", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `crown`.
    var crown: ImageResource { .init(name: "crown", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `description`.
    var description: ImageResource { .init(name: "description", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dislikePlayer`.
    var dislikePlayer: ImageResource { .init(name: "dislikePlayer", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dislikePlayerColored`.
    var dislikePlayerColored: ImageResource { .init(name: "dislikePlayerColored", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dj`.
    var dj: ImageResource { .init(name: "dj", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dollar`.
    var dollar: ImageResource { .init(name: "dollar", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dollar_in_white`.
    var dollar_in_white: ImageResource { .init(name: "dollar_in_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `download`.
    var download: ImageResource { .init(name: "download", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `facebook`.
    var facebook: ImageResource { .init(name: "facebook", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fan`.
    var fan: ImageResource { .init(name: "fan", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fast-forward`.
    var fastForward: ImageResource { .init(name: "fast-forward", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `favorite`.
    var favorite: ImageResource { .init(name: "favorite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `friend_msg_ic`.
    var friend_msg_ic: ImageResource { .init(name: "friend_msg_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `google-plus`.
    var googlePlus: ImageResource { .init(name: "google-plus", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `googleIcon`.
    var googleIcon: ImageResource { .init(name: "googleIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `googlepay`.
    var googlepay: ImageResource { .init(name: "googlepay", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `heart`.
    var heart: ImageResource { .init(name: "heart", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `heart_white`.
    var heart_white: ImageResource { .init(name: "heart_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-Addtoplaylist`.
    var icAddtoplaylist: ImageResource { .init(name: "ic-Addtoplaylist", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-arrow-right`.
    var icArrowRight: ImageResource { .init(name: "ic-arrow-right", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-block-bs`.
    var icBlockBs: ImageResource { .init(name: "ic-block-bs", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-calender`.
    var icCalender: ImageResource { .init(name: "ic-calender", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-cart`.
    var icCart: ImageResource { .init(name: "ic-cart", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-chart`.
    var icChart: ImageResource { .init(name: "ic-chart", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-chat`.
    var icChat: ImageResource { .init(name: "ic-chat", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-checkbox`.
    var icCheckbox: ImageResource { .init(name: "ic-checkbox", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-delete-bs`.
    var icDeleteBs: ImageResource { .init(name: "ic-delete-bs", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-detail-bs`.
    var icDetailBs: ImageResource { .init(name: "ic-detail-bs", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-dislike-heart-border`.
    var icDislikeHeartBorder: ImageResource { .init(name: "ic-dislike-heart-border", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-dislike-heart-fill`.
    var icDislikeHeartFill: ImageResource { .init(name: "ic-dislike-heart-fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-dot-side-menu`.
    var icDotSideMenu: ImageResource { .init(name: "ic-dot-side-menu", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-download-square`.
    var icDownloadSquare: ImageResource { .init(name: "ic-download-square", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-edit-square`.
    var icEditSquare: ImageResource { .init(name: "ic-edit-square", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-email`.
    var icEmail: ImageResource { .init(name: "ic-email", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-export`.
    var icExport: ImageResource { .init(name: "ic-export", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-eye`.
    var icEye: ImageResource { .init(name: "ic-eye", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-favoritees-tb`.
    var icFavoriteesTb: ImageResource { .init(name: "ic-favoritees-tb", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-favoritees-tb-selected`.
    var icFavoriteesTbSelected: ImageResource { .init(name: "ic-favoritees-tb-selected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-folders`.
    var icFolders: ImageResource { .init(name: "ic-folders", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-heart-bs`.
    var icHeartBs: ImageResource { .init(name: "ic-heart-bs", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-heart-orange-bs`.
    var icHeartOrangeBs: ImageResource { .init(name: "ic-heart-orange-bs", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-home-tb`.
    var icHomeTb: ImageResource { .init(name: "ic-home-tb", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-home-tb-selected`.
    var icHomeTbSelected: ImageResource { .init(name: "ic-home-tb-selected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-import`.
    var icImport: ImageResource { .init(name: "ic-import", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-info-square`.
    var icInfoSquare: ImageResource { .init(name: "ic-info-square", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-lock`.
    var icLock: ImageResource { .init(name: "ic-lock", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-masterCard`.
    var icMasterCard: ImageResource { .init(name: "ic-masterCard", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-mastercard-b`.
    var icMastercardB: ImageResource { .init(name: "ic-mastercard-b", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-music-tb`.
    var icMusicTb: ImageResource { .init(name: "ic-music-tb", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-notification`.
    var icNotification: ImageResource { .init(name: "ic-notification", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-notification-bs`.
    var icNotificationBs: ImageResource { .init(name: "ic-notification-bs", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-paperplus`.
    var icPaperplus: ImageResource { .init(name: "ic-paperplus", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-pause-btn`.
    var icPauseBtn: ImageResource { .init(name: "ic-pause-btn", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-phone-bs`.
    var icPhoneBs: ImageResource { .init(name: "ic-phone-bs", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-placeholder-image`.
    var icPlaceholderImage: ImageResource { .init(name: "ic-placeholder-image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-play-bs`.
    var icPlayBs: ImageResource { .init(name: "ic-play-bs", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-play-btn`.
    var icPlayBtn: ImageResource { .init(name: "ic-play-btn", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-play-btn-inc`.
    var icPlayBtnInc: ImageResource { .init(name: "ic-play-btn-inc", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-play-forward10`.
    var icPlayForward10: ImageResource { .init(name: "ic-play-forward10", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-play-next`.
    var icPlayNext: ImageResource { .init(name: "ic-play-next", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-play-prev`.
    var icPlayPrev: ImageResource { .init(name: "ic-play-prev", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-play-prev10`.
    var icPlayPrev10: ImageResource { .init(name: "ic-play-prev10", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-playlist-bs`.
    var icPlaylistBs: ImageResource { .init(name: "ic-playlist-bs", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-playlist-tb-selected`.
    var icPlaylistTbSelected: ImageResource { .init(name: "ic-playlist-tb-selected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-playlists-tb`.
    var icPlaylistsTb: ImageResource { .init(name: "ic-playlists-tb", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-playnext`.
    var icPlaynext: ImageResource { .init(name: "ic-playnext", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-profile-dark`.
    var icProfileDark: ImageResource { .init(name: "ic-profile-dark", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-profile-tb`.
    var icProfileTb: ImageResource { .init(name: "ic-profile-tb", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-profile-tb-selected`.
    var icProfileTbSelected: ImageResource { .init(name: "ic-profile-tb-selected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-purchase`.
    var icPurchase: ImageResource { .init(name: "ic-purchase", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-radio-check-fpu`.
    var icRadioCheckFpu: ImageResource { .init(name: "ic-radio-check-fpu", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-radio-uncheck-fpu`.
    var icRadioUncheckFpu: ImageResource { .init(name: "ic-radio-uncheck-fpu", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-repeat`.
    var icRepeat: ImageResource { .init(name: "ic-repeat", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-repost`.
    var icRepost: ImageResource { .init(name: "ic-repost", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-round-dotedmore`.
    var icRoundDotedmore: ImageResource { .init(name: "ic-round-dotedmore", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-scrollup-arrow`.
    var icScrollupArrow: ImageResource { .init(name: "ic-scrollup-arrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-search`.
    var icSearch: ImageResource { .init(name: "ic-search", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-share-bs`.
    var icShareBs: ImageResource { .init(name: "ic-share-bs", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-shield`.
    var icShield: ImageResource { .init(name: "ic-shield", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-shuffle`.
    var icShuffle: ImageResource { .init(name: "ic-shuffle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-station-bs`.
    var icStationBs: ImageResource { .init(name: "ic-station-bs", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-trending-tb`.
    var icTrendingTb: ImageResource { .init(name: "ic-trending-tb", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-trending-tb-selected`.
    var icTrendingTbSelected: ImageResource { .init(name: "ic-trending-tb-selected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-uncheck`.
    var icUncheck: ImageResource { .init(name: "ic-uncheck", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-user`.
    var icUser: ImageResource { .init(name: "ic-user", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-user-Bold`.
    var icUserBold: ImageResource { .init(name: "ic-user-Bold", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_action_Import`.
    var ic_action_Import: ImageResource { .init(name: "ic_action_Import", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_action_arrow_down_sign`.
    var ic_action_arrow_down_sign: ImageResource { .init(name: "ic_action_arrow_down_sign", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_action_back`.
    var ic_action_back: ImageResource { .init(name: "ic_action_back", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_action_check_mark`.
    var ic_action_check_mark: ImageResource { .init(name: "ic_action_check_mark", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_action_close`.
    var ic_action_close: ImageResource { .init(name: "ic_action_close", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_action_heart`.
    var ic_action_heart: ImageResource { .init(name: "ic_action_heart", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_action_more`.
    var ic_action_more: ImageResource { .init(name: "ic_action_more", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_action_play_button`.
    var ic_action_play_button: ImageResource { .init(name: "ic_action_play_button", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_action_share`.
    var ic_action_share: ImageResource { .init(name: "ic_action_share", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_action_star`.
    var ic_action_star: ImageResource { .init(name: "ic_action_star", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_action_star-1`.
    var ic_action_star1: ImageResource { .init(name: "ic_action_star-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_action_upload`.
    var ic_action_upload: ImageResource { .init(name: "ic_action_upload", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_add`.
    var ic_add: ImageResource { .init(name: "ic_add", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_addUser`.
    var ic_addUser: ImageResource { .init(name: "ic_addUser", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_at`.
    var ic_at: ImageResource { .init(name: "ic_at", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_backwardPlayer`.
    var ic_backwardPlayer: ImageResource { .init(name: "ic_backwardPlayer", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_bell`.
    var ic_bell: ImageResource { .init(name: "ic_bell", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_bell-1`.
    var ic_bell1: ImageResource { .init(name: "ic_bell-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_bellBig`.
    var ic_bellBig: ImageResource { .init(name: "ic_bellBig", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_camera`.
    var ic_camera: ImageResource { .init(name: "ic_camera", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chat`.
    var ic_chat: ImageResource { .init(name: "ic_chat", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_check_radio`.
    var ic_check_radio: ImageResource { .init(name: "ic_check_radio", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_checked`.
    var ic_checked: ImageResource { .init(name: "ic_checked", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_circularTick`.
    var ic_circularTick: ImageResource { .init(name: "ic_circularTick", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_cloudPlayer`.
    var ic_cloudPlayer: ImageResource { .init(name: "ic_cloudPlayer", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_comment`.
    var ic_comment: ImageResource { .init(name: "ic_comment", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_commentBig`.
    var ic_commentBig: ImageResource { .init(name: "ic_commentBig", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_commentPlayer`.
    var ic_commentPlayer: ImageResource { .init(name: "ic_commentPlayer", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_copper_card`.
    var ic_copper_card: ImageResource { .init(name: "ic_copper_card", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_edit`.
    var ic_edit: ImageResource { .init(name: "ic_edit", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_editGrey`.
    var ic_editGrey: ImageResource { .init(name: "ic_editGrey", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_facebook`.
    var ic_facebook: ImageResource { .init(name: "ic_facebook", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_filter`.
    var ic_filter: ImageResource { .init(name: "ic_filter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_flag`.
    var ic_flag: ImageResource { .init(name: "ic_flag", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_forwardPlayer`.
    var ic_forwardPlayer: ImageResource { .init(name: "ic_forwardPlayer", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_gender`.
    var ic_gender: ImageResource { .init(name: "ic_gender", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_globe`.
    var ic_globe: ImageResource { .init(name: "ic_globe", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_heart`.
    var ic_heart: ImageResource { .init(name: "ic_heart", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_heartOutlinePlayer`.
    var ic_heartOutlinePlayer: ImageResource { .init(name: "ic_heartOutlinePlayer", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_heartRed`.
    var ic_heartRed: ImageResource { .init(name: "ic_heartRed", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_info`.
    var ic_info: ImageResource { .init(name: "ic_info", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_info_bordered`.
    var ic_info_bordered: ImageResource { .init(name: "ic_info_bordered", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_infoplayer`.
    var ic_infoplayer: ImageResource { .init(name: "ic_infoplayer", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_latest_downloads`.
    var ic_latest_downloads: ImageResource { .init(name: "ic_latest_downloads", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_lock`.
    var ic_lock: ImageResource { .init(name: "ic_lock", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_logo`.
    var ic_logo: ImageResource { .init(name: "ic_logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_mail`.
    var ic_mail: ImageResource { .init(name: "ic_mail", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_message_user`.
    var ic_message_user: ImageResource { .init(name: "ic_message_user", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_money`.
    var ic_money: ImageResource { .init(name: "ic_money", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_more`.
    var ic_more: ImageResource { .init(name: "ic_more", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_moreHorizontal`.
    var ic_moreHorizontal: ImageResource { .init(name: "ic_moreHorizontal", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_more_dots_horizntal`.
    var ic_more_dots_horizntal: ImageResource { .init(name: "ic_more_dots_horizntal", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_musicBig`.
    var ic_musicBig: ImageResource { .init(name: "ic_musicBig", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_musicType`.
    var ic_musicType: ImageResource { .init(name: "ic_musicType", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_notificationLike`.
    var ic_notificationLike: ImageResource { .init(name: "ic_notificationLike", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_notificationUser`.
    var ic_notificationUser: ImageResource { .init(name: "ic_notificationUser", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_outlineHeart`.
    var ic_outlineHeart: ImageResource { .init(name: "ic_outlineHeart", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_pause`.
    var ic_pause: ImageResource { .init(name: "ic_pause", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_pausePlayer`.
    var ic_pausePlayer: ImageResource { .init(name: "ic_pausePlayer", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_people`.
    var ic_people: ImageResource { .init(name: "ic_people", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_person`.
    var ic_person: ImageResource { .init(name: "ic_person", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_personBig`.
    var ic_personBig: ImageResource { .init(name: "ic_personBig", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_pin`.
    var ic_pin: ImageResource { .init(name: "ic_pin", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_play`.
    var ic_play: ImageResource { .init(name: "ic_play", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_playPlayer`.
    var ic_playPlayer: ImageResource { .init(name: "ic_playPlayer", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_playerAdd`.
    var ic_playerAdd: ImageResource { .init(name: "ic_playerAdd", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_playerCancel`.
    var ic_playerCancel: ImageResource { .init(name: "ic_playerCancel", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_redHeart`.
    var ic_redHeart: ImageResource { .init(name: "ic_redHeart", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_rocket`.
    var ic_rocket: ImageResource { .init(name: "ic_rocket", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_searchBig`.
    var ic_searchBig: ImageResource { .init(name: "ic_searchBig", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_send`.
    var ic_send: ImageResource { .init(name: "ic_send", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_settings_person`.
    var ic_settings_person: ImageResource { .init(name: "ic_settings_person", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_share`.
    var ic_share: ImageResource { .init(name: "ic_share", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_sharePlayer`.
    var ic_sharePlayer: ImageResource { .init(name: "ic_sharePlayer", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_smile`.
    var ic_smile: ImageResource { .init(name: "ic_smile", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_star`.
    var ic_star: ImageResource { .init(name: "ic_star", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_starPlayer`.
    var ic_starPlayer: ImageResource { .init(name: "ic_starPlayer", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_starYellow`.
    var ic_starYellow: ImageResource { .init(name: "ic_starYellow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_browse`.
    var ic_tab_browse: ImageResource { .init(name: "ic_tab_browse", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_feed`.
    var ic_tab_feed: ImageResource { .init(name: "ic_tab_feed", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_library`.
    var ic_tab_library: ImageResource { .init(name: "ic_tab_library", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_messages`.
    var ic_tab_messages: ImageResource { .init(name: "ic_tab_messages", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_notification`.
    var ic_tab_notification: ImageResource { .init(name: "ic_tab_notification", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_playlist`.
    var ic_tab_playlist: ImageResource { .init(name: "ic_tab_playlist", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_profile`.
    var ic_tab_profile: ImageResource { .init(name: "ic_tab_profile", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_search`.
    var ic_tab_search: ImageResource { .init(name: "ic_tab_search", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tick`.
    var ic_tick: ImageResource { .init(name: "ic_tick", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_uncheck`.
    var ic_uncheck: ImageResource { .init(name: "ic_uncheck", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_uncheck_radio`.
    var ic_uncheck_radio: ImageResource { .init(name: "ic_uncheck_radio", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_upload`.
    var ic_upload: ImageResource { .init(name: "ic_upload", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconSplash`.
    var iconSplash: ImageResource { .init(name: "iconSplash", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_notification`.
    var icon_notification: ImageResource { .init(name: "icon_notification", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `info`.
    var info: ImageResource { .init(name: "info", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `intro_backward`.
    var intro_backward: ImageResource { .init(name: "intro_backward", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `intro_forward`.
    var intro_forward: ImageResource { .init(name: "intro_forward", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `line_verticle_black`.
    var line_verticle_black: ImageResource { .init(name: "line_verticle_black", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `line_verticle_white`.
    var line_verticle_white: ImageResource { .init(name: "line_verticle_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `login`.
    var login: ImageResource { .init(name: "login", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `loginBackground`.
    var loginBackground: ImageResource { .init(name: "loginBackground", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `login_forward`.
    var login_forward: ImageResource { .init(name: "login_forward", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `logo`.
    var logo: ImageResource { .init(name: "logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `logo_WoWonder`.
    var logo_WoWonder: ImageResource { .init(name: "logo_WoWonder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `lyric`.
    var lyric: ImageResource { .init(name: "lyric", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `message`.
    var message: ImageResource { .init(name: "message", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `money-sack`.
    var moneySack: ImageResource { .init(name: "money-sack", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `more`.
    var more: ImageResource { .init(name: "more", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `musicNode`.
    var musicNode: ImageResource { .init(name: "musicNode", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `musicSheet`.
    var musicSheet: ImageResource { .init(name: "musicSheet", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `musicplaylist`.
    var musicplaylist: ImageResource { .init(name: "musicplaylist", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `my_msg_ic`.
    var my_msg_ic: ImageResource { .init(name: "my_msg_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `no_profile_image`.
    var no_profile_image: ImageResource { .init(name: "no_profile_image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `no_profile_image_circle`.
    var no_profile_image_circle: ImageResource { .init(name: "no_profile_image_circle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `notificationSettings`.
    var notificationSettings: ImageResource { .init(name: "notificationSettings", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `pause-symbol`.
    var pauseSymbol: ImageResource { .init(name: "pause-symbol", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `paypal`.
    var paypal: ImageResource { .init(name: "paypal", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `play-button`.
    var playButton: ImageResource { .init(name: "play-button", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `play-button_white`.
    var playButton_white: ImageResource { .init(name: "play-button_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `playlist_Music`.
    var playlist_Music: ImageResource { .init(name: "playlist_Music", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `repeat`.
    var `repeat`: ImageResource { .init(name: "repeat", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `repeat_s`.
    var repeat_s: ImageResource { .init(name: "repeat_s", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `send_img_ic`.
    var send_img_ic: ImageResource { .init(name: "send_img_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `send_msg_ic`.
    var send_msg_ic: ImageResource { .init(name: "send_msg_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `share`.
    var share: ImageResource { .init(name: "share", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `shield`.
    var shield: ImageResource { .init(name: "shield", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `shuffle`.
    var shuffle: ImageResource { .init(name: "shuffle", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `shuffle_s`.
    var shuffle_s: ImageResource { .init(name: "shuffle_s", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `slider-track`.
    var sliderTrack: ImageResource { .init(name: "slider-track", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `slider-track-fill`.
    var sliderTrackFill: ImageResource { .init(name: "slider-track-fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `soundcloud`.
    var soundcloud: ImageResource { .init(name: "soundcloud", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `splashscreen`.
    var splashscreen: ImageResource { .init(name: "splashscreen", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `subimage`.
    var subimage: ImageResource { .init(name: "subimage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tag`.
    var tag: ImageResource { .init(name: "tag", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `thumb`.
    var thumb: ImageResource { .init(name: "thumb", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `time`.
    var time: ImageResource { .init(name: "time", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `trophy`.
    var trophy: ImageResource { .init(name: "trophy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `twoFactor`.
    var twoFactor: ImageResource { .init(name: "twoFactor", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.entitlements` struct is generated, and contains static references to 2 properties.
  struct entitlements {
    let apsEnvironment: String = "development"
    let comAppleDeveloperApplesignin = comAppleDeveloperApplesignin()
    let comAppleDeveloperInAppPayments = comAppleDeveloperInAppPayments()
    struct comAppleDeveloperApplesignin {
      let `default`: String = "Default"
    }
    struct comAppleDeveloperInAppPayments {
      let merchantComDeepSoundScripSunAppISo: String = "merchant.com.DeepSound.ScripSun.App.iSo"
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 22 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `Poppins-Black`.
    var poppinsBlack: RswiftResources.FontResource { .init(name: "Poppins-Black", bundle: bundle, filename: "Poppins-Black.otf") }

    /// Font `Poppins-BlackItalic`.
    var poppinsBlackItalic: RswiftResources.FontResource { .init(name: "Poppins-BlackItalic", bundle: bundle, filename: "Poppins-BlackItalic.otf") }

    /// Font `Poppins-Bold`.
    var poppinsBold: RswiftResources.FontResource { .init(name: "Poppins-Bold", bundle: bundle, filename: "Poppins-Bold.otf") }

    /// Font `Poppins-BoldItalic`.
    var poppinsBoldItalic: RswiftResources.FontResource { .init(name: "Poppins-BoldItalic", bundle: bundle, filename: "Poppins-BoldItalic.otf") }

    /// Font `Poppins-ExtraBold`.
    var poppinsExtraBold: RswiftResources.FontResource { .init(name: "Poppins-ExtraBold", bundle: bundle, filename: "Poppins-ExtraBold.otf") }

    /// Font `Poppins-ExtraBoldItalic`.
    var poppinsExtraBoldItalic: RswiftResources.FontResource { .init(name: "Poppins-ExtraBoldItalic", bundle: bundle, filename: "Poppins-ExtraBoldItalic.otf") }

    /// Font `Poppins-ExtraLight`.
    var poppinsExtraLight: RswiftResources.FontResource { .init(name: "Poppins-ExtraLight", bundle: bundle, filename: "Poppins-ExtraLight.otf") }

    /// Font `Poppins-ExtraLightItalic`.
    var poppinsExtraLightItalic: RswiftResources.FontResource { .init(name: "Poppins-ExtraLightItalic", bundle: bundle, filename: "Poppins-ExtraLightItalic.otf") }

    /// Font `Poppins-Italic`.
    var poppinsItalic: RswiftResources.FontResource { .init(name: "Poppins-Italic", bundle: bundle, filename: "Poppins-Italic.otf") }

    /// Font `Poppins-Light`.
    var poppinsLight: RswiftResources.FontResource { .init(name: "Poppins-Light", bundle: bundle, filename: "Poppins-Light.otf") }

    /// Font `Poppins-LightItalic`.
    var poppinsLightItalic: RswiftResources.FontResource { .init(name: "Poppins-LightItalic", bundle: bundle, filename: "Poppins-LightItalic.otf") }

    /// Font `Poppins-Medium`.
    var poppinsMedium: RswiftResources.FontResource { .init(name: "Poppins-Medium", bundle: bundle, filename: "Poppins-Medium.otf") }

    /// Font `Poppins-MediumItalic`.
    var poppinsMediumItalic: RswiftResources.FontResource { .init(name: "Poppins-MediumItalic", bundle: bundle, filename: "Poppins-MediumItalic.otf") }

    /// Font `Poppins-Regular`.
    var poppinsRegular: RswiftResources.FontResource { .init(name: "Poppins-Regular", bundle: bundle, filename: "Poppins-Regular.otf") }

    /// Font `Poppins-SemiBold`.
    var poppinsSemiBold: RswiftResources.FontResource { .init(name: "Poppins-SemiBold", bundle: bundle, filename: "Poppins-SemiBold.otf") }

    /// Font `Poppins-SemiBoldItalic`.
    var poppinsSemiBoldItalic: RswiftResources.FontResource { .init(name: "Poppins-SemiBoldItalic", bundle: bundle, filename: "Poppins-SemiBoldItalic.otf") }

    /// Font `Poppins-Thin`.
    var poppinsThin: RswiftResources.FontResource { .init(name: "Poppins-Thin", bundle: bundle, filename: "Poppins-Thin.otf") }

    /// Font `Poppins-ThinItalic`.
    var poppinsThinItalic: RswiftResources.FontResource { .init(name: "Poppins-ThinItalic", bundle: bundle, filename: "Poppins-ThinItalic.otf") }

    /// Font `Urbanist-Bold`.
    var urbanistBold: RswiftResources.FontResource { .init(name: "Urbanist-Bold", bundle: bundle, filename: "urbanist_bold.ttf") }

    /// Font `Urbanist-Medium`.
    var urbanistMedium: RswiftResources.FontResource { .init(name: "Urbanist-Medium", bundle: bundle, filename: "urbanist_medium.ttf") }

    /// Font `Urbanist-Regular`.
    var urbanistRegular: RswiftResources.FontResource { .init(name: "Urbanist-Regular", bundle: bundle, filename: "urbanist_regular.ttf") }

    /// Font `Urbanist-SemiBold`.
    var urbanistSemiBold: RswiftResources.FontResource { .init(name: "Urbanist-SemiBold", bundle: bundle, filename: "Urbanist_SemiBold.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [poppinsBlack, poppinsBlackItalic, poppinsBold, poppinsBoldItalic, poppinsExtraBold, poppinsExtraBoldItalic, poppinsExtraLight, poppinsExtraLightItalic, poppinsItalic, poppinsLight, poppinsLightItalic, poppinsMedium, poppinsMediumItalic, poppinsRegular, poppinsSemiBold, poppinsSemiBoldItalic, poppinsThin, poppinsThinItalic, urbanistBold, urbanistMedium, urbanistRegular, urbanistSemiBold].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 42 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `Poppins-Black.otf`.
    var poppinsBlackOtf: RswiftResources.FileResource { .init(name: "Poppins-Black", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-BlackItalic.otf`.
    var poppinsBlackItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-BlackItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Bold.otf`.
    var poppinsBoldOtf: RswiftResources.FileResource { .init(name: "Poppins-Bold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-BoldItalic.otf`.
    var poppinsBoldItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-BoldItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-ExtraBold.otf`.
    var poppinsExtraBoldOtf: RswiftResources.FileResource { .init(name: "Poppins-ExtraBold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-ExtraBoldItalic.otf`.
    var poppinsExtraBoldItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-ExtraBoldItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-ExtraLight.otf`.
    var poppinsExtraLightOtf: RswiftResources.FileResource { .init(name: "Poppins-ExtraLight", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-ExtraLightItalic.otf`.
    var poppinsExtraLightItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-ExtraLightItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Italic.otf`.
    var poppinsItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-Italic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Light.otf`.
    var poppinsLightOtf: RswiftResources.FileResource { .init(name: "Poppins-Light", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-LightItalic.otf`.
    var poppinsLightItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-LightItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Medium.otf`.
    var poppinsMediumOtf: RswiftResources.FileResource { .init(name: "Poppins-Medium", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-MediumItalic.otf`.
    var poppinsMediumItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-MediumItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Regular.otf`.
    var poppinsRegularOtf: RswiftResources.FileResource { .init(name: "Poppins-Regular", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-SemiBold.otf`.
    var poppinsSemiBoldOtf: RswiftResources.FileResource { .init(name: "Poppins-SemiBold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-SemiBoldItalic.otf`.
    var poppinsSemiBoldItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-SemiBoldItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Thin.otf`.
    var poppinsThinOtf: RswiftResources.FileResource { .init(name: "Poppins-Thin", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-ThinItalic.otf`.
    var poppinsThinItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-ThinItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Urbanist_SemiBold.ttf`.
    var urbanist_SemiBoldTtf: RswiftResources.FileResource { .init(name: "Urbanist_SemiBold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64-apple-ios.swiftdoc`.
    var arm64AppleIosSwiftdoc: RswiftResources.FileResource { .init(name: "arm64-apple-ios", pathExtension: "swiftdoc", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64-apple-ios.swiftinterface`.
    var arm64AppleIosSwiftinterface: RswiftResources.FileResource { .init(name: "arm64-apple-ios", pathExtension: "swiftinterface", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64-apple-ios.swiftmodule`.
    var arm64AppleIosSwiftmodule: RswiftResources.FileResource { .init(name: "arm64-apple-ios", pathExtension: "swiftmodule", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64-apple-ios.swiftsourceinfo`.
    var arm64AppleIosSwiftsourceinfo: RswiftResources.FileResource { .init(name: "arm64-apple-ios", pathExtension: "swiftsourceinfo", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64.swiftdoc`.
    var arm64Swiftdoc: RswiftResources.FileResource { .init(name: "arm64", pathExtension: "swiftdoc", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64.swiftinterface`.
    var arm64Swiftinterface: RswiftResources.FileResource { .init(name: "arm64", pathExtension: "swiftinterface", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64.swiftmodule`.
    var arm64Swiftmodule: RswiftResources.FileResource { .init(name: "arm64", pathExtension: "swiftmodule", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64.swiftsourceinfo`.
    var arm64Swiftsourceinfo: RswiftResources.FileResource { .init(name: "arm64", pathExtension: "swiftsourceinfo", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `repeat.png`.
    var repeatPng: RswiftResources.FileResource { .init(name: "repeat", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `repeat_s.png`.
    var repeat_sPng: RswiftResources.FileResource { .init(name: "repeat_s", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `shuffle.png`.
    var shufflePng: RswiftResources.FileResource { .init(name: "shuffle", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `shuffle_s.png`.
    var shuffle_sPng: RswiftResources.FileResource { .init(name: "shuffle_s", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `urbanist_bold.ttf`.
    var urbanist_boldTtf: RswiftResources.FileResource { .init(name: "urbanist_bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `urbanist_medium.ttf`.
    var urbanist_mediumTtf: RswiftResources.FileResource { .init(name: "urbanist_medium", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `urbanist_regular.ttf`.
    var urbanist_regularTtf: RswiftResources.FileResource { .init(name: "urbanist_regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.swiftdoc`.
    var x86_64AppleIosSimulatorSwiftdoc: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator", pathExtension: "swiftdoc", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.swiftinterface`.
    var x86_64AppleIosSimulatorSwiftinterface: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator", pathExtension: "swiftinterface", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.swiftmodule`.
    var x86_64AppleIosSimulatorSwiftmodule: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator", pathExtension: "swiftmodule", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.swiftsourceinfo`.
    var x86_64AppleIosSimulatorSwiftsourceinfo: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator", pathExtension: "swiftsourceinfo", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64.swiftdoc`.
    var x86_64Swiftdoc: RswiftResources.FileResource { .init(name: "x86_64", pathExtension: "swiftdoc", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64.swiftinterface`.
    var x86_64Swiftinterface: RswiftResources.FileResource { .init(name: "x86_64", pathExtension: "swiftinterface", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64.swiftmodule`.
    var x86_64Swiftmodule: RswiftResources.FileResource { .init(name: "x86_64", pathExtension: "swiftmodule", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64.swiftsourceinfo`.
    var x86_64Swiftsourceinfo: RswiftResources.FileResource { .init(name: "x86_64", pathExtension: "swiftsourceinfo", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 119 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `Activities-TableCell`.
    var activitiesTableCell: RswiftResources.NibReferenceReuseIdentifier<Activities_TableCell, Activities_TableCell> { .init(name: "Activities-TableCell", bundle: bundle, identifier: "Activities_TableCell") }

    /// Nib `AddMenuBottomSheetController`.
    var addMenuBottomSheetController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AddMenuBottomSheetController", bundle: bundle) }

    /// Nib `AddNewCardCell`.
    var addNewCardCell: RswiftResources.NibReference<AddNewCardCell> { .init(name: "AddNewCardCell", bundle: bundle) }

    /// Nib `ArticleSectionFiveTableItem`.
    var articleSectionFiveTableItem: RswiftResources.NibReferenceReuseIdentifier<ArticleSectionFiveTableItem, ArticleSectionFiveTableItem> { .init(name: "ArticleSectionFiveTableItem", bundle: bundle, identifier: "ArticleSectionFiveTableItem") }

    /// Nib `ArticleSectionThreeTableItem`.
    var articleSectionThreeTableItem: RswiftResources.NibReferenceReuseIdentifier<ArticleSectionThreeTableItem, ArticleSectionThreeTableItem> { .init(name: "ArticleSectionThreeTableItem", bundle: bundle, identifier: "ArticleSectionThreeTableItem") }

    /// Nib `ArticlesCollectionItem`.
    var articlesCollectionItem: RswiftResources.NibReferenceReuseIdentifier<ArticlesCollectionItem, ArticlesCollectionItem> { .init(name: "ArticlesCollectionItem", bundle: bundle, identifier: "ArticlesCollectionItem") }

    /// Nib `ArticlesSectionFourTableItem`.
    var articlesSectionFourTableItem: RswiftResources.NibReferenceReuseIdentifier<ArticlesSectionFourTableItem, ArticlesSectionFourTableItem> { .init(name: "ArticlesSectionFourTableItem", bundle: bundle, identifier: "ArticlesSectionFourTableItem") }

    /// Nib `ArticlesSectionOneTableItem`.
    var articlesSectionOneTableItem: RswiftResources.NibReferenceReuseIdentifier<ArticlesSectionOneTableItem, ArticlesSectionOneTableItem> { .init(name: "ArticlesSectionOneTableItem", bundle: bundle, identifier: "ArticlesSectionOneTableItem") }

    /// Nib `ArticlesSectionTwoTableItem`.
    var articlesSectionTwoTableItem: RswiftResources.NibReferenceReuseIdentifier<ArticlesSectionTwoTableItem, ArticlesSectionTwoTableItem> { .init(name: "ArticlesSectionTwoTableItem", bundle: bundle, identifier: "ArticlesSectionTwoTableItem") }

    /// Nib `Artist-CollectionCell`.
    var artistCollectionCell: RswiftResources.NibReferenceReuseIdentifier<Artist_CollectionCell, Artist_CollectionCell> { .init(name: "Artist-CollectionCell", bundle: bundle, identifier: "Artist_CollectionCell") }

    /// Nib `ArtistInfoCell`.
    var artistInfoCell: RswiftResources.NibReference<ArtistInfoCell> { .init(name: "ArtistInfoCell", bundle: bundle) }

    /// Nib `ArtistInfoDetail`.
    var artistInfoDetail: RswiftResources.NibReference<ArtistInfoDetail> { .init(name: "ArtistInfoDetail", bundle: bundle) }

    /// Nib `ArtistTableCell`.
    var artistTableCell: RswiftResources.NibReference<ArtistTableCell> { .init(name: "ArtistTableCell", bundle: bundle) }

    /// Nib `ArtistsBottomSheetController`.
    var artistsBottomSheetController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ArtistsBottomSheetController", bundle: bundle) }

    /// Nib `AssigingOrderHeaderTableCell`.
    var assigingOrderHeaderTableCell: RswiftResources.NibReference<AssigingOrderHeaderTableCell> { .init(name: "AssigingOrderHeaderTableCell", bundle: bundle) }

    /// Nib `BlockedUsers-TableCell`.
    var blockedUsersTableCell: RswiftResources.NibReferenceReuseIdentifier<BlockedUsers_TableCell, BlockedUsers_TableCell> { .init(name: "BlockedUsers-TableCell", bundle: bundle, identifier: "BlockedUsers_TableCell") }

    /// Nib `BorderedTextField`.
    var borderedTextField: RswiftResources.NibReference<UIKit.UIView> { .init(name: "BorderedTextField", bundle: bundle) }

    /// Nib `BrowseAlbums-TableCell`.
    var browseAlbumsTableCell: RswiftResources.NibReferenceReuseIdentifier<BrowseAlbums_TableCell, BrowseAlbums_TableCell> { .init(name: "BrowseAlbums-TableCell", bundle: bundle, identifier: "BrowseAlbums_TableCell") }

    /// Nib `Browse-CollectionCell`.
    var browseCollectionCell: RswiftResources.NibReferenceReuseIdentifier<Browse_CollectionCell, Browse_CollectionCell> { .init(name: "Browse-CollectionCell", bundle: bundle, identifier: "Browse_CollectionCell") }

    /// Nib `BrowserSectionOneTableItem`.
    var browserSectionOneTableItem: RswiftResources.NibReferenceReuseIdentifier<BrowserSectionOneTableItem, BrowserSectionOneTableItem> { .init(name: "BrowserSectionOneTableItem", bundle: bundle, identifier: "BrowserSectionOneTableItem") }

    /// Nib `BrowserSectionTwoTableItem`.
    var browserSectionTwoTableItem: RswiftResources.NibReferenceReuseIdentifier<BrowserSectionTwoTableItem, BrowserSectionTwoTableItem> { .init(name: "BrowserSectionTwoTableItem", bundle: bundle, identifier: "BrowserSectionTwoTableItem") }

    /// Nib `CartCollectionCell`.
    var cartCollectionCell: RswiftResources.NibReferenceReuseIdentifier<CartCollectionCell, CartCollectionCell> { .init(name: "CartCollectionCell", bundle: bundle, identifier: "CartCollectionCell") }

    /// Nib `CartTableItem`.
    var cartTableItem: RswiftResources.NibReferenceReuseIdentifier<CartTableItem, CartTableItem> { .init(name: "CartTableItem", bundle: bundle, identifier: "CartTableItem") }

    /// Nib `ChatReceiverTableItem`.
    var chatReceiverTableItem: RswiftResources.NibReferenceReuseIdentifier<ChatReceiverTableItem, ChatReceiverTableItem> { .init(name: "ChatReceiverTableItem", bundle: bundle, identifier: "ChatReceiverTableItem") }

    /// Nib `ChatSenderTableItem`.
    var chatSenderTableItem: RswiftResources.NibReferenceReuseIdentifier<ChatSenderTableItem, ChatSenderTableItem> { .init(name: "ChatSenderTableItem", bundle: bundle, identifier: "ChatSenderTableItem") }

    /// Nib `ChatTableItem`.
    var chatTableItem: RswiftResources.NibReferenceReuseIdentifier<ChatTableItem, ChatTableItem> { .init(name: "ChatTableItem", bundle: bundle, identifier: "ChatTableItem") }

    /// Nib `Comments-TableCell`.
    var commentsTableCell: RswiftResources.NibReferenceReuseIdentifier<Comments_TableCell, Comments_TableCell> { .init(name: "Comments-TableCell", bundle: bundle, identifier: "Comments_TableCell") }

    /// Nib `CreateEventTableItem`.
    var createEventTableItem: RswiftResources.NibReferenceReuseIdentifier<CreateEventTableItem, CreateEventTableItem> { .init(name: "CreateEventTableItem", bundle: bundle, identifier: "CreateEventTableItem") }

    /// Nib `CreateProductCollectionItem`.
    var createProductCollectionItem: RswiftResources.NibReferenceReuseIdentifier<CreateProductCollectionItem, CreateProductCollectionItem> { .init(name: "CreateProductCollectionItem", bundle: bundle, identifier: "CreateProductCollectionItem") }

    /// Nib `CreateProductTableItem`.
    var createProductTableItem: RswiftResources.NibReferenceReuseIdentifier<CreateProductTableItem, CreateProductTableItem> { .init(name: "CreateProductTableItem", bundle: bundle, identifier: "CreateProductTableItem") }

    /// Nib `DashBoardSectionSixTableItem`.
    var dashBoardSectionSixTableItem: RswiftResources.NibReferenceReuseIdentifier<DashBoardSectionSixTableItem, DashBoardSectionSixTableItem> { .init(name: "DashBoardSectionSixTableItem", bundle: bundle, identifier: "DashBoardSectionSixTableItem") }

    /// Nib `DashboardArtist-CollectionCell`.
    var dashboardArtistCollectionCell: RswiftResources.NibReferenceReuseIdentifier<DashboardArtist_CollectionCell, DashboardArtist_CollectionCell> { .init(name: "DashboardArtist-CollectionCell", bundle: bundle, identifier: "DashboardArtist_CollectionCell") }

    /// Nib `DashboardGenres-CollectionCell`.
    var dashboardGenresCollectionCell: RswiftResources.NibReferenceReuseIdentifier<DashboardGenres_CollectionCell, DashboardGenres_CollectionCell> { .init(name: "DashboardGenres-CollectionCell", bundle: bundle, identifier: "DashboardGenres_CollectionCell") }

    /// Nib `DashboardNewRelease_CollectionCell`.
    var dashboardNewRelease_CollectionCell: RswiftResources.NibReferenceReuseIdentifier<DashboardNewRelease_CollectionCell, DashboardNewRelease_CollectionCell> { .init(name: "DashboardNewRelease_CollectionCell", bundle: bundle, identifier: "DashboardNewRelease_CollectionCell") }

    /// Nib `DashboardPopular-CollectionCell`.
    var dashboardPopularCollectionCell: RswiftResources.NibReferenceReuseIdentifier<DashboardPopular_CollectionCell, DashboardPopular_CollectionCell> { .init(name: "DashboardPopular-CollectionCell", bundle: bundle, identifier: "DashboardPopular_CollectionCell") }

    /// Nib `DashboardRecentlyPlayed-CollectionCell`.
    var dashboardRecentlyPlayedCollectionCell: RswiftResources.NibReferenceReuseIdentifier<DashboardRecentlyPlayed_CollectionCell, DashboardRecentlyPlayed_CollectionCell> { .init(name: "DashboardRecentlyPlayed-CollectionCell", bundle: bundle, identifier: "DashboardRecentlyPlayed_CollectionCell") }

    /// Nib `DashboardRecentlyPlayed-TableCell`.
    var dashboardRecentlyPlayedTableCell: RswiftResources.NibReferenceReuseIdentifier<DashboardRecentlyPlayed_TableCell, DashboardRecentlyPlayed_TableCell> { .init(name: "DashboardRecentlyPlayed-TableCell", bundle: bundle, identifier: "DashboardRecentlyPlayed_TableCell") }

    /// Nib `DashboardSectionFiveTableItem`.
    var dashboardSectionFiveTableItem: RswiftResources.NibReferenceReuseIdentifier<DashboardSectionFiveTableItem, DashboardSectionFiveTableItem> { .init(name: "DashboardSectionFiveTableItem", bundle: bundle, identifier: "DashboardSectionFiveTableItem") }

    /// Nib `DashboardSectionFourTableItem`.
    var dashboardSectionFourTableItem: RswiftResources.NibReferenceReuseIdentifier<DashboardSectionFourTableItem, DashboardSectionFourTableItem> { .init(name: "DashboardSectionFourTableItem", bundle: bundle, identifier: "DashboardSectionFourTableItem") }

    /// Nib `DashboardSectionOneCollectionItem`.
    var dashboardSectionOneCollectionItem: RswiftResources.NibReferenceReuseIdentifier<DashboardSectionOneCollectionItem, DashboardSectionOneCollectionItem> { .init(name: "DashboardSectionOneCollectionItem", bundle: bundle, identifier: "DashboardSectionOneCollectionItem") }

    /// Nib `DashboardSectionOneTableItem`.
    var dashboardSectionOneTableItem: RswiftResources.NibReferenceReuseIdentifier<DashboardSectionOneTableItem, DashboardSectionOneTableItem> { .init(name: "DashboardSectionOneTableItem", bundle: bundle, identifier: "DashboardSectionOneTableItem") }

    /// Nib `DashboardSectionThreeTableItem`.
    var dashboardSectionThreeTableItem: RswiftResources.NibReferenceReuseIdentifier<DashboardSectionThreeTableItem, DashboardSectionThreeTableItem> { .init(name: "DashboardSectionThreeTableItem", bundle: bundle, identifier: "DashboardSectionThreeTableItem") }

    /// Nib `DashboardSectionTwoCollectionItem`.
    var dashboardSectionTwoCollectionItem: RswiftResources.NibReferenceReuseIdentifier<DashboardSectionTwoCollectionItem, DashboardSectionTwoCollectionItem> { .init(name: "DashboardSectionTwoCollectionItem", bundle: bundle, identifier: "DashboardSectionTwoCollectionItem") }

    /// Nib `DashboardSectionTwoTableItem`.
    var dashboardSectionTwoTableItem: RswiftResources.NibReferenceReuseIdentifier<DashboardSectionTwoTableItem, DashboardSectionTwoTableItem> { .init(name: "DashboardSectionTwoTableItem", bundle: bundle, identifier: "DashboardSectionTwoTableItem") }

    /// Nib `DashboardSlider-CollectionCell`.
    var dashboardSliderCollectionCell: RswiftResources.NibReferenceReuseIdentifier<DashboardSlider_CollectionCell, DashboardSlider_CollectionCell> { .init(name: "DashboardSlider-CollectionCell", bundle: bundle, identifier: "DashboardSlider_CollectionCell") }

    /// Nib `EventDetailTableItem`.
    var eventDetailTableItem: RswiftResources.NibReferenceReuseIdentifier<EventDetailTableItem, EventDetailTableItem> { .init(name: "EventDetailTableItem", bundle: bundle, identifier: "EventDetailTableItem") }

    /// Nib `EventShowTableItem`.
    var eventShowTableItem: RswiftResources.NibReferenceReuseIdentifier<EventShowTableItem, EventShowTableItem> { .init(name: "EventShowTableItem", bundle: bundle, identifier: "EventShowTableItem") }

    /// Nib `EventTableCell`.
    var eventTableCell: RswiftResources.NibReference<EventTableCell> { .init(name: "EventTableCell", bundle: bundle) }

    /// Nib `EventsCollectionCell`.
    var eventsCollectionCell: RswiftResources.NibReference<EventsCollectionCell> { .init(name: "EventsCollectionCell", bundle: bundle) }

    /// Nib `ExpandableProfileTableItem`.
    var expandableProfileTableItem: RswiftResources.NibReferenceReuseIdentifier<ExpandableProfileTableItem, ExpandableProfileTableItem> { .init(name: "ExpandableProfileTableItem", bundle: bundle, identifier: "ExpandableProfileTableItem") }

    /// Nib `ExpandableReviewTableItem`.
    var expandableReviewTableItem: RswiftResources.NibReferenceReuseIdentifier<ExpandableReviewTableItem, ExpandableReviewTableItem> { .init(name: "ExpandableReviewTableItem", bundle: bundle, identifier: "ExpandableReviewTableItem") }

    /// Nib `ExpandableTextTableItem`.
    var expandableTextTableItem: RswiftResources.NibReferenceReuseIdentifier<ExpandableTextTableItem, ExpandableTextTableItem> { .init(name: "ExpandableTextTableItem", bundle: bundle, identifier: "ExpandableTextTableItem") }

    /// Nib `Favorite-TableCell`.
    var favoriteTableCell: RswiftResources.NibReferenceReuseIdentifier<Favorite_TableCell, Favorite_TableCell> { .init(name: "Favorite-TableCell", bundle: bundle, identifier: "Favorite_TableCell") }

    /// Nib `FavouriteSongBottomSheetController`.
    var favouriteSongBottomSheetController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "FavouriteSongBottomSheetController", bundle: bundle) }

    /// Nib `FilterPopUPController`.
    var filterPopUPController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "FilterPopUPController", bundle: bundle) }

    /// Nib `FilterPopUpCell`.
    var filterPopUpCell: RswiftResources.NibReference<FilterPopUpCell> { .init(name: "FilterPopUpCell", bundle: bundle) }

    /// Nib `FoldersTableCell`.
    var foldersTableCell: RswiftResources.NibReference<FoldersTableCell> { .init(name: "FoldersTableCell", bundle: bundle) }

    /// Nib `Followers-TableCell`.
    var followersTableCell: RswiftResources.NibReferenceReuseIdentifier<Followers_TableCell, Followers_TableCell> { .init(name: "Followers-TableCell", bundle: bundle, identifier: "Followers_TableCell") }

    /// Nib `Followings-TableCell`.
    var followingsTableCell: RswiftResources.NibReferenceReuseIdentifier<Followings_TableCell, Followings_TableCell> { .init(name: "Followings-TableCell", bundle: bundle, identifier: "Followings_TableCell") }

    /// Nib `Genres-CollectionCell`.
    var genresCollectionCell: RswiftResources.NibReferenceReuseIdentifier<Genres_CollectionCell, Genres_CollectionCell> { .init(name: "Genres-CollectionCell", bundle: bundle, identifier: "Genres_CollectionCell") }

    /// Nib `GenresSongs-TableCell`.
    var genresSongsTableCell: RswiftResources.NibReferenceReuseIdentifier<GenresSongs_TableCell, GenresSongs_TableCell> { .init(name: "GenresSongs-TableCell", bundle: bundle, identifier: "GenresSongs_TableCell") }

    /// Nib `IntroItemView`.
    var introItemView: RswiftResources.NibReference<IntroItem> { .init(name: "IntroItemView", bundle: bundle) }

    /// Nib `LatestDownload-TableCell`.
    var latestDownloadTableCell: RswiftResources.NibReferenceReuseIdentifier<LatestDownload_TableCell, LatestDownload_TableCell> { .init(name: "LatestDownload-TableCell", bundle: bundle, identifier: "LatestDownload_TableCell") }

    /// Nib `LatestSongs-TableCell`.
    var latestSongsTableCell: RswiftResources.NibReferenceReuseIdentifier<LatestSongs_TableCell, LatestSongs_TableCell> { .init(name: "LatestSongs-TableCell", bundle: bundle, identifier: "LatestSongs_TableCell") }

    /// Nib `Library-TableCell`.
    var libraryTableCell: RswiftResources.NibReferenceReuseIdentifier<Library_TableCell, Library_TableCell> { .init(name: "Library-TableCell", bundle: bundle, identifier: "Library_TableCell") }

    /// Nib `Liked-TableCell`.
    var likedTableCell: RswiftResources.NibReferenceReuseIdentifier<Liked_TableCell, Liked_TableCell> { .init(name: "Liked-TableCell", bundle: bundle, identifier: "Liked_TableCell") }

    /// Nib `ManageSessionTableItem`.
    var manageSessionTableItem: RswiftResources.NibReferenceReuseIdentifier<ManageSessionTableItem, ManageSessionTableItem> { .init(name: "ManageSessionTableItem", bundle: bundle, identifier: "ManageSessionTableItem") }

    /// Nib `MyPlayList-CollectionCell`.
    var myPlayListCollectionCell: RswiftResources.NibReferenceReuseIdentifier<MyPlayList_CollectionCell, MyPlayList_CollectionCell> { .init(name: "MyPlayList-CollectionCell", bundle: bundle, identifier: "MyPlayList_CollectionCell") }

    /// Nib `NoDataTableItem`.
    var noDataTableItem: RswiftResources.NibReferenceReuseIdentifier<NoDataTableItem, NoDataTableItem> { .init(name: "NoDataTableItem", bundle: bundle, identifier: "NoDataTableItem") }

    /// Nib `NoLoginTableItem`.
    var noLoginTableItem: RswiftResources.NibReferenceReuseIdentifier<NoLoginTableItem, NoLoginTableItem> { .init(name: "NoLoginTableItem", bundle: bundle, identifier: "NoLoginTableItem") }

    /// Nib `Notifications-TableCell`.
    var notificationsTableCell: RswiftResources.NibReferenceReuseIdentifier<Notifications_TableCell, Notifications_TableCell> { .init(name: "Notifications-TableCell", bundle: bundle, identifier: "Notifications_TableCell") }

    /// Nib `PaymentOptionCell`.
    var paymentOptionCell: RswiftResources.NibReference<PaymentOptionCell> { .init(name: "PaymentOptionCell", bundle: bundle) }

    /// Nib `PlayListSectionOneTableItem`.
    var playListSectionOneTableItem: RswiftResources.NibReferenceReuseIdentifier<PlayListSectionOneTableItem, PlayListSectionOneTableItem> { .init(name: "PlayListSectionOneTableItem", bundle: bundle, identifier: "PlayListSectionOneTableItem") }

    /// Nib `PlayListSectionTwoTableItem`.
    var playListSectionTwoTableItem: RswiftResources.NibReferenceReuseIdentifier<PlayListSectionTwoTableItem, PlayListSectionTwoTableItem> { .init(name: "PlayListSectionTwoTableItem", bundle: bundle, identifier: "PlayListSectionTwoTableItem") }

    /// Nib `Playlist-CollectionCell`.
    var playlistCollectionCell: RswiftResources.NibReferenceReuseIdentifier<Playlist_CollectionCell, Playlist_CollectionCell> { .init(name: "Playlist-CollectionCell", bundle: bundle, identifier: "Playlist_CollectionCell") }

    /// Nib `PlaylistSectionTwoCollectionItem`.
    var playlistSectionTwoCollectionItem: RswiftResources.NibReferenceReuseIdentifier<PlaylistSectionTwoCollectionItem, PlaylistSectionTwoCollectionItem> { .init(name: "PlaylistSectionTwoCollectionItem", bundle: bundle, identifier: "PlaylistSectionTwoCollectionItem") }

    /// Nib `Popular-TableCell`.
    var popularTableCell: RswiftResources.NibReferenceReuseIdentifier<Popular_TableCell, Popular_TableCell> { .init(name: "Popular-TableCell", bundle: bundle, identifier: "Popular_TableCell") }

    /// Nib `PremiumSubcriptionCell`.
    var premiumSubcriptionCell: RswiftResources.NibReference<PremiumSubcriptionCell> { .init(name: "PremiumSubcriptionCell", bundle: bundle) }

    /// Nib `productHeadrItem`.
    var productHeadrItem: RswiftResources.NibReferenceReuseIdentifier<productHeadrItem, productHeadrItem> { .init(name: "productHeadrItem", bundle: bundle, identifier: "productHeadrItem") }

    /// Nib `ProductTableItem`.
    var productTableItem: RswiftResources.NibReferenceReuseIdentifier<ProductTableItem, ProductTableItem> { .init(name: "ProductTableItem", bundle: bundle, identifier: "ProductTableItem") }

    /// Nib `ProductsCollectionItem`.
    var productsCollectionItem: RswiftResources.NibReferenceReuseIdentifier<ProductsCollectionItem, ProductsCollectionItem> { .init(name: "ProductsCollectionItem", bundle: bundle, identifier: "ProductsCollectionItem") }

    /// Nib `ProductsCollectionTableCell`.
    var productsCollectionTableCell: RswiftResources.NibReferenceReuseIdentifier<ProductsCollectionTableCell, ProductsCollectionTableCell> { .init(name: "ProductsCollectionTableCell", bundle: bundle, identifier: "ProductsCollectionTableCell") }

    /// Nib `productsRelatedItem`.
    var productsRelatedItem: RswiftResources.NibReferenceReuseIdentifier<productsRelatedItem, productsRelatedItem> { .init(name: "productsRelatedItem", bundle: bundle, identifier: "productsRelatedItem") }

    /// Nib `productsSectionItem`.
    var productsSectionItem: RswiftResources.NibReferenceReuseIdentifier<productsSectionItem, productsSectionItem> { .init(name: "productsSectionItem", bundle: bundle, identifier: "productsSectionItem") }

    /// Nib `ProfileAlbumsTableCell`.
    var profileAlbumsTableCell: RswiftResources.NibReference<ProfileAlbumsTableCell> { .init(name: "ProfileAlbumsTableCell", bundle: bundle) }

    /// Nib `ProfilePlaylistCollectionCell`.
    var profilePlaylistCollectionCell: RswiftResources.NibReferenceReuseIdentifier<ProfilePlaylistCollectionCell, ProfilePlaylistCollectionCell> { .init(name: "ProfilePlaylistCollectionCell", bundle: bundle, identifier: "ProfilePlaylistCollectionCell") }

    /// Nib `ProfileSongTableItem`.
    var profileSongTableItem: RswiftResources.NibReferenceReuseIdentifier<ProfileSongTableItem, ProfileSongTableItem> { .init(name: "ProfileSongTableItem", bundle: bundle, identifier: "ProfileSongTableItem") }

    /// Nib `PurchaseButtonTableItem`.
    var purchaseButtonTableItem: RswiftResources.NibReferenceReuseIdentifier<PurchaseButtonTableItem, PurchaseButtonTableItem> { .init(name: "PurchaseButtonTableItem", bundle: bundle, identifier: "PurchaseButtonTableItem") }

    /// Nib `PurchaseTableItem`.
    var purchaseTableItem: RswiftResources.NibReferenceReuseIdentifier<PurchaseTableItem, PurchaseTableItem> { .init(name: "PurchaseTableItem", bundle: bundle, identifier: "PurchaseTableItem") }

    /// Nib `ReceiverImageTableItem`.
    var receiverImageTableItem: RswiftResources.NibReferenceReuseIdentifier<ReceiverImageTableItem, ReceiverImageTableItem> { .init(name: "ReceiverImageTableItem", bundle: bundle, identifier: "ReceiverImageTableItem") }

    /// Nib `RecentlyPlayedSongBottomSheetController`.
    var recentlyPlayedSongBottomSheetController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "RecentlyPlayedSongBottomSheetController", bundle: bundle) }

    /// Nib `RecentlyPlayed-TableCell`.
    var recentlyPlayedTableCell: RswiftResources.NibReferenceReuseIdentifier<RecentlyPlayed_TableCell, RecentlyPlayed_TableCell> { .init(name: "RecentlyPlayed-TableCell", bundle: bundle, identifier: "RecentlyPlayed_TableCell") }

    /// Nib `SearchAlbum-TableCell`.
    var searchAlbumTableCell: RswiftResources.NibReferenceReuseIdentifier<SearchAlbum_TableCell, SearchAlbum_TableCell> { .init(name: "SearchAlbum-TableCell", bundle: bundle, identifier: "SearchAlbum_TableCell") }

    /// Nib `SearchArtist-TableCell`.
    var searchArtistTableCell: RswiftResources.NibReferenceReuseIdentifier<SearchArtist_TableCell, SearchArtist_TableCell> { .init(name: "SearchArtist-TableCell", bundle: bundle, identifier: "SearchArtist_TableCell") }

    /// Nib `SearchPlaylist-TableCell`.
    var searchPlaylistTableCell: RswiftResources.NibReferenceReuseIdentifier<SearchPlaylist_TableCell, SearchPlaylist_TableCell> { .init(name: "SearchPlaylist-TableCell", bundle: bundle, identifier: "SearchPlaylist_TableCell") }

    /// Nib `SearchSong-TableCell`.
    var searchSongTableCell: RswiftResources.NibReferenceReuseIdentifier<SearchSong_TableCell, SearchSong_TableCell> { .init(name: "SearchSong-TableCell", bundle: bundle, identifier: "SearchSong_TableCell") }

    /// Nib `SectionHeaderTableItem`.
    var sectionHeaderTableItem: RswiftResources.NibReferenceReuseIdentifier<SectionHeaderTableItem, SectionHeaderTableItem> { .init(name: "SectionHeaderTableItem", bundle: bundle, identifier: "SectionHeaderTableItem") }

    /// Nib `SectionHeaderTableViewCell`.
    var sectionHeaderTableViewCell: RswiftResources.NibReferenceReuseIdentifier<SectionHeaderTableViewCell, SectionHeaderTableViewCell> { .init(name: "SectionHeaderTableViewCell", bundle: bundle, identifier: "SectionHeaderTableViewCell") }

    /// Nib `SelectFilter-TableCell`.
    var selectFilterTableCell: RswiftResources.NibReferenceReuseIdentifier<SelectFilter_TableCell, SelectFilter_TableCell> { .init(name: "SelectFilter-TableCell", bundle: bundle, identifier: "SelectFilter_TableCell") }

    /// Nib `SelectGenres-TableCell`.
    var selectGenresTableCell: RswiftResources.NibReferenceReuseIdentifier<SelectGenres_TableCell, SelectGenres_TableCell> { .init(name: "SelectGenres-TableCell", bundle: bundle, identifier: "SelectGenres_TableCell") }

    /// Nib `SelectPlaylist-TableCell`.
    var selectPlaylistTableCell: RswiftResources.NibReferenceReuseIdentifier<SelectPlaylist_TableCell, SelectPlaylist_TableCell> { .init(name: "SelectPlaylist-TableCell", bundle: bundle, identifier: "SelectPlaylist_TableCell") }

    /// Nib `SelectPrice-TableCell`.
    var selectPriceTableCell: RswiftResources.NibReferenceReuseIdentifier<SelectPrice_TableCell, SelectPrice_TableCell> { .init(name: "SelectPrice-TableCell", bundle: bundle, identifier: "SelectPrice_TableCell") }

    /// Nib `SenderImageTableItem`.
    var senderImageTableItem: RswiftResources.NibReferenceReuseIdentifier<SenderImageTableItem, SenderImageTableItem> { .init(name: "SenderImageTableItem", bundle: bundle, identifier: "SenderImageTableItem") }

    /// Nib `SettingCreditCardTableCell`.
    var settingCreditCardTableCell: RswiftResources.NibReferenceReuseIdentifier<SettingCreditCardTableCell, SettingCreditCardTableCell> { .init(name: "SettingCreditCardTableCell", bundle: bundle, identifier: "SettingCreditCardTableCell") }

    /// Nib `SettingNotificationItem`.
    var settingNotificationItem: RswiftResources.NibReferenceReuseIdentifier<SettingNotificationItem, SettingNotificationItem> { .init(name: "SettingNotificationItem", bundle: bundle, identifier: "SettingNotificationItem") }

    /// Nib `SettingsSectionOneTableItem`.
    var settingsSectionOneTableItem: RswiftResources.NibReferenceReuseIdentifier<SettingsSectionOneTableItem, SettingsSectionOneTableItem> { .init(name: "SettingsSectionOneTableItem", bundle: bundle, identifier: "SettingsSectionOneTableItem") }

    /// Nib `SettingsSectionTwoTableItem`.
    var settingsSectionTwoTableItem: RswiftResources.NibReferenceReuseIdentifier<SettingsSectionTwoTableItem, SettingsSectionTwoTableItem> { .init(name: "SettingsSectionTwoTableItem", bundle: bundle, identifier: "SettingsSectionTwoTableItem") }

    /// Nib `Settings-TableCell`.
    var settingsTableCell: RswiftResources.NibReferenceReuseIdentifier<Settings_TableCell, Settings_TableCell> { .init(name: "Settings-TableCell", bundle: bundle, identifier: "Settings_TableCell") }

    /// Nib `Shared-TableCell`.
    var sharedTableCell: RswiftResources.NibReferenceReuseIdentifier<Shared_TableCell, Shared_TableCell> { .init(name: "Shared-TableCell", bundle: bundle, identifier: "Shared_TableCell") }

    /// Nib `SongsTableCells`.
    var songsTableCells: RswiftResources.NibReference<SongsTableCells> { .init(name: "SongsTableCells", bundle: bundle) }

    /// Nib `StationTableItem`.
    var stationTableItem: RswiftResources.NibReferenceReuseIdentifier<StationTableItem, StationTableItem> { .init(name: "StationTableItem", bundle: bundle, identifier: "StationTableItem") }

    /// Nib `StationsTableItem`.
    var stationsTableItem: RswiftResources.NibReferenceReuseIdentifier<StationsTableItem, StationsTableItem> { .init(name: "StationsTableItem", bundle: bundle, identifier: "StationsTableItem") }

    /// Nib `StoreCollectionItem`.
    var storeCollectionItem: RswiftResources.NibReferenceReuseIdentifier<StoreCollectionItem, StoreCollectionItem> { .init(name: "StoreCollectionItem", bundle: bundle, identifier: "StoreCollectionItem") }

    /// Nib `TopAlbums-CollectionCell`.
    var topAlbumsCollectionCell: RswiftResources.NibReferenceReuseIdentifier<TopAlbums_CollectionCell, TopAlbums_CollectionCell> { .init(name: "TopAlbums-CollectionCell", bundle: bundle, identifier: "TopAlbums_CollectionCell") }

    /// Nib `TopSongBottomSheetController`.
    var topSongBottomSheetController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "TopSongBottomSheetController", bundle: bundle) }

    /// Nib `UpgradeOneMonthCell`.
    var upgradeOneMonthCell: RswiftResources.NibReference<UpgradeOneMonthCell> { .init(name: "UpgradeOneMonthCell", bundle: bundle) }

    /// Nib `UpgradeProHeaderCell`.
    var upgradeProHeaderCell: RswiftResources.NibReference<UpgradeProHeaderCell> { .init(name: "UpgradeProHeaderCell", bundle: bundle) }

    /// Nib `UpgradeSixMonthCell`.
    var upgradeSixMonthCell: RswiftResources.NibReference<UpgradeSixMonthCell> { .init(name: "UpgradeSixMonthCell", bundle: bundle) }

    /// Nib `UpgradethreeMonthCell`.
    var upgradethreeMonthCell: RswiftResources.NibReference<UpgradethreeMonthCell> { .init(name: "UpgradethreeMonthCell", bundle: bundle) }

    func validate() throws {
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'Activities-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in nib 'Activities-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "time", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'time' is used in nib 'Activities-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-chart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-chart' is used in nib 'AddMenuBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-export", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-export' is used in nib 'AddMenuBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-import", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-import' is used in nib 'AddMenuBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-notification-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-notification-bs' is used in nib 'AddMenuBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-playlist-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-playlist-bs' is used in nib 'AddMenuBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-station-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-station-bs' is used in nib 'AddMenuBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder_circle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder_circle' is used in nib 'ArticleSectionFiveTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "my_msg_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'my_msg_ic' is used in nib 'ArticleSectionFiveTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "time", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'time' is used in nib 'ArticlesSectionTwoTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'Artist-CollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Image' is used in nib 'ArtistInfoCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Image' is used in nib 'ArtistsBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Paper", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Paper' is used in nib 'ArtistsBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-Addtoplaylist", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-Addtoplaylist' is used in nib 'ArtistsBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-play-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-play-bs' is used in nib 'ArtistsBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-playnext", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-playnext' is used in nib 'ArtistsBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-share-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-share-bs' is used in nib 'ArtistsBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Swap", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Swap' is used in nib 'AssigingOrderHeaderTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'BlockedUsers-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "right_arrow_black_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'right_arrow_black_icon' is used in nib 'BorderedTextField', but couldn't be loaded.") }
      if UIKit.UIColor(named: "label_text_color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'label_text_color' is used in nib 'BorderedTextField', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'Browse-CollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'BrowseAlbums-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in nib 'BrowseAlbums-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_outlineHeart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_outlineHeart' is used in nib 'BrowseAlbums-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_action_play_button", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_action_play_button' is used in nib 'BrowserSectionTwoTableItem', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "cart.badge.minus.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'cart.badge.minus.fill' is used in nib 'CartCollectionCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "fan", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'fan' is used in nib 'CartCollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Grey_Offline", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Grey_Offline' is used in nib 'CartTableItem', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "cart.badge.minus.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'cart.badge.minus.fill' is used in nib 'CartTableItem', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "friend_msg_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'friend_msg_ic' is used in nib 'ChatReceiverTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "my_msg_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'my_msg_ic' is used in nib 'ChatSenderTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "chatIconImage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chatIconImage' is used in nib 'ChatTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'Comments-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_heartOutlinePlayer", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_heartOutlinePlayer' is used in nib 'Comments-TableCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'plus' is used in nib 'CreateEventTableItem', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'CreateProductCollectionItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_playerCancel", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_playerCancel' is used in nib 'CreateProductCollectionItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'DashboardArtist-CollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "check", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'check' is used in nib 'DashboardArtist-CollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'DashboardNewRelease_CollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'DashboardPopular-CollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'DashboardRecentlyPlayed-CollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart' is used in nib 'DashboardRecentlyPlayed-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in nib 'DashboardRecentlyPlayed-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_action_play_button", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_action_play_button' is used in nib 'DashboardSectionOneCollectionItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'DashboardSlider-CollectionCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "calendar") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'calendar' is used in nib 'EventDetailTableItem', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "google.png", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'google.png' is used in nib 'EventDetailTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in nib 'EventDetailTableItem', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "location.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'location.fill' is used in nib 'EventDetailTableItem', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'logo' is used in nib 'EventDetailTableItem', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ticket") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'ticket' is used in nib 'EventDetailTableItem', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'EventShowTableItem', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "calendar") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'calendar' is used in nib 'EventShowTableItem', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "mappin.and.ellipse") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'mappin.and.ellipse' is used in nib 'EventShowTableItem', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'EventsCollectionCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "calendar") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'calendar' is used in nib 'EventsCollectionCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "mappin.and.ellipse") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'mappin.and.ellipse' is used in nib 'EventsCollectionCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "heart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart' is used in nib 'Favorite-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in nib 'Favorite-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Image' is used in nib 'FavouriteSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Paper", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Paper' is used in nib 'FavouriteSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-Addtoplaylist", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-Addtoplaylist' is used in nib 'FavouriteSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-block-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-block-bs' is used in nib 'FavouriteSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-delete-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-delete-bs' is used in nib 'FavouriteSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-detail-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-detail-bs' is used in nib 'FavouriteSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-heart-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-heart-bs' is used in nib 'FavouriteSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-heart-orange-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-heart-orange-bs' is used in nib 'FavouriteSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-phone-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-phone-bs' is used in nib 'FavouriteSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-playSqure", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-playSqure' is used in nib 'FavouriteSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-playnext", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-playnext' is used in nib 'FavouriteSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-profile-dark", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-profile-dark' is used in nib 'FavouriteSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-share-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-share-bs' is used in nib 'FavouriteSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-radio-check-fpu", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-radio-check-fpu' is used in nib 'FilterPopUpCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-radio-uncheck-fpu", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-radio-uncheck-fpu' is used in nib 'FilterPopUpCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-dot-side-menu", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-dot-side-menu' is used in nib 'FoldersTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-folders", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-folders' is used in nib 'FoldersTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'Followers-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'Followings-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_tick", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_tick' is used in nib 'Genres-CollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'GenresSongs-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_comment", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_comment' is used in nib 'GenresSongs-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_heart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_heart' is used in nib 'GenresSongs-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in nib 'GenresSongs-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_play", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_play' is used in nib 'GenresSongs-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_share", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_share' is used in nib 'GenresSongs-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_star' is used in nib 'GenresSongs-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "bgCircles", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'bgCircles' is used in nib 'IntroItemView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "bgWalkthrough", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'bgWalkthrough' is used in nib 'IntroItemView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart' is used in nib 'LatestDownload-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in nib 'LatestDownload-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart' is used in nib 'LatestSongs-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in nib 'LatestSongs-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-arrow-right", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-arrow-right' is used in nib 'Library-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_action_heart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_action_heart' is used in nib 'Library-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart' is used in nib 'Liked-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in nib 'Liked-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_action_close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_action_close' is used in nib 'ManageSessionTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'MyPlayList-CollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in nib 'MyPlayList-CollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "playlist_Music", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'playlist_Music' is used in nib 'MyPlayList-CollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EmptyData", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EmptyData' is used in nib 'NoDataTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "login", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'login' is used in nib 'NoLoginTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'Notifications-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-radio-check-fpu", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-radio-check-fpu' is used in nib 'PaymentOptionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-radio-uncheck-fpu", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-radio-uncheck-fpu' is used in nib 'PaymentOptionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "paypal", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'paypal' is used in nib 'PaymentOptionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'Playlist-CollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "playlist_Music", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'playlist_Music' is used in nib 'Playlist-CollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "album", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'album' is used in nib 'PlaylistSectionTwoCollectionItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_action_play_button", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_action_play_button' is used in nib 'PlaylistSectionTwoCollectionItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart' is used in nib 'Popular-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in nib 'Popular-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-mastercard-b", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-mastercard-b' is used in nib 'PremiumSubcriptionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "subimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'subimage' is used in nib 'PremiumSubcriptionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Icon-App-83.5x83.5", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Icon-App-83.5x83.5' is used in nib 'ProductTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Icon-App-83.5x83.5", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Icon-App-83.5x83.5' is used in nib 'ProductsCollectionItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_action_play_button", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_action_play_button' is used in nib 'ProfileAlbumsTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "album", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'album' is used in nib 'ProfilePlaylistCollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart' is used in nib 'ProfileSongTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in nib 'ProfileSongTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "EmptyData", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EmptyData' is used in nib 'PurchaseButtonTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart' is used in nib 'PurchaseTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in nib 'PurchaseTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "friend_msg_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'friend_msg_ic' is used in nib 'ReceiverImageTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart' is used in nib 'RecentlyPlayed-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in nib 'RecentlyPlayed-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Image' is used in nib 'RecentlyPlayedSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Paper", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Paper' is used in nib 'RecentlyPlayedSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-Addtoplaylist", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-Addtoplaylist' is used in nib 'RecentlyPlayedSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-block-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-block-bs' is used in nib 'RecentlyPlayedSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-delete-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-delete-bs' is used in nib 'RecentlyPlayedSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-detail-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-detail-bs' is used in nib 'RecentlyPlayedSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-heart-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-heart-bs' is used in nib 'RecentlyPlayedSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-heart-orange-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-heart-orange-bs' is used in nib 'RecentlyPlayedSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-phone-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-phone-bs' is used in nib 'RecentlyPlayedSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-playSqure", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-playSqure' is used in nib 'RecentlyPlayedSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-playnext", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-playnext' is used in nib 'RecentlyPlayedSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-profile-dark", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-profile-dark' is used in nib 'RecentlyPlayedSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-share-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-share-bs' is used in nib 'RecentlyPlayedSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'SearchAlbum-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in nib 'SearchAlbum-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'SearchArtist-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'SearchPlaylist-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "playlist_Music", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'playlist_Music' is used in nib 'SearchPlaylist-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart' is used in nib 'SearchSong-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in nib 'SearchSong-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "check", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'check' is used in nib 'SectionHeaderTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "no_profile_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'no_profile_image' is used in nib 'SectionHeaderTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_money", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_money' is used in nib 'SelectFilter-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_uncheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_uncheck' is used in nib 'SelectGenres-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_uncheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_uncheck' is used in nib 'SelectPlaylist-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_uncheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_uncheck' is used in nib 'SelectPrice-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "my_msg_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'my_msg_ic' is used in nib 'SenderImageTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "no_profile_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'no_profile_image' is used in nib 'SettingCreditCardTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-profile-dark", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-profile-dark' is used in nib 'SettingsSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "intro_forward", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'intro_forward' is used in nib 'SettingsSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "intro_forward", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'intro_forward' is used in nib 'SettingsSectionTwoTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heart' is used in nib 'Shared-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in nib 'Shared-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-dot-side-menu", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-dot-side-menu' is used in nib 'SongsTableCells', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-pause-btn", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-pause-btn' is used in nib 'SongsTableCells', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-play-btn", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-play-btn' is used in nib 'SongsTableCells', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'TopAlbums-CollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Image' is used in nib 'TopSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Paper", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Paper' is used in nib 'TopSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-Addtoplaylist", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-Addtoplaylist' is used in nib 'TopSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-block-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-block-bs' is used in nib 'TopSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-delete-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-delete-bs' is used in nib 'TopSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-detail-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-detail-bs' is used in nib 'TopSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-edit-square", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-edit-square' is used in nib 'TopSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-heart-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-heart-bs' is used in nib 'TopSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-heart-orange-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-heart-orange-bs' is used in nib 'TopSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-phone-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-phone-bs' is used in nib 'TopSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-play-squre", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-play-squre' is used in nib 'TopSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-playnext", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-playnext' is used in nib 'TopSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-profile-dark", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-profile-dark' is used in nib 'TopSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-repost", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-repost' is used in nib 'TopSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-share-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-share-bs' is used in nib 'TopSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic-shield", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-shield' is used in nib 'TopSongBottomSheetController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "WhiteTick", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'WhiteTick' is used in nib 'UpgradeOneMonthCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "crown", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'crown' is used in nib 'UpgradeOneMonthCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "WhiteTick", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'WhiteTick' is used in nib 'UpgradeSixMonthCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "crown", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'crown' is used in nib 'UpgradeSixMonthCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "WhiteTick", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'WhiteTick' is used in nib 'UpgradethreeMonthCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "crown", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'crown' is used in nib 'UpgradethreeMonthCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_action_back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_action_back' is used in nib 'productHeadrItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in nib 'productHeadrItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "play-button", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'play-button' is used in nib 'productsRelatedItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "info", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'info' is used in nib 'productsSectionItem', but couldn't be loaded.") }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 95 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `Activities_TableCell`.
    let activities_TableCell: RswiftResources.ReuseIdentifier<Activities_TableCell> = .init(identifier: "Activities_TableCell")

    /// Reuse identifier `ArticleSectionFiveTableItem`.
    let articleSectionFiveTableItem: RswiftResources.ReuseIdentifier<ArticleSectionFiveTableItem> = .init(identifier: "ArticleSectionFiveTableItem")

    /// Reuse identifier `ArticleSectionThreeTableItem`.
    let articleSectionThreeTableItem: RswiftResources.ReuseIdentifier<ArticleSectionThreeTableItem> = .init(identifier: "ArticleSectionThreeTableItem")

    /// Reuse identifier `ArticlesCollectionItem`.
    let articlesCollectionItem: RswiftResources.ReuseIdentifier<ArticlesCollectionItem> = .init(identifier: "ArticlesCollectionItem")

    /// Reuse identifier `ArticlesSectionFourTableItem`.
    let articlesSectionFourTableItem: RswiftResources.ReuseIdentifier<ArticlesSectionFourTableItem> = .init(identifier: "ArticlesSectionFourTableItem")

    /// Reuse identifier `ArticlesSectionOneTableItem`.
    let articlesSectionOneTableItem: RswiftResources.ReuseIdentifier<ArticlesSectionOneTableItem> = .init(identifier: "ArticlesSectionOneTableItem")

    /// Reuse identifier `ArticlesSectionTwoTableItem`.
    let articlesSectionTwoTableItem: RswiftResources.ReuseIdentifier<ArticlesSectionTwoTableItem> = .init(identifier: "ArticlesSectionTwoTableItem")

    /// Reuse identifier `Artist_CollectionCell`.
    let artist_CollectionCell: RswiftResources.ReuseIdentifier<Artist_CollectionCell> = .init(identifier: "Artist_CollectionCell")

    /// Reuse identifier `BlockedUsers_TableCell`.
    let blockedUsers_TableCell: RswiftResources.ReuseIdentifier<BlockedUsers_TableCell> = .init(identifier: "BlockedUsers_TableCell")

    /// Reuse identifier `BrowseAlbums_TableCell`.
    let browseAlbums_TableCell: RswiftResources.ReuseIdentifier<BrowseAlbums_TableCell> = .init(identifier: "BrowseAlbums_TableCell")

    /// Reuse identifier `Browse_CollectionCell`.
    let browse_CollectionCell: RswiftResources.ReuseIdentifier<Browse_CollectionCell> = .init(identifier: "Browse_CollectionCell")

    /// Reuse identifier `BrowserSectionOneTableItem`.
    let browserSectionOneTableItem: RswiftResources.ReuseIdentifier<BrowserSectionOneTableItem> = .init(identifier: "BrowserSectionOneTableItem")

    /// Reuse identifier `BrowserSectionTwoTableItem`.
    let browserSectionTwoTableItem: RswiftResources.ReuseIdentifier<BrowserSectionTwoTableItem> = .init(identifier: "BrowserSectionTwoTableItem")

    /// Reuse identifier `CartCollectionCell`.
    let cartCollectionCell: RswiftResources.ReuseIdentifier<CartCollectionCell> = .init(identifier: "CartCollectionCell")

    /// Reuse identifier `CartTableItem`.
    let cartTableItem: RswiftResources.ReuseIdentifier<CartTableItem> = .init(identifier: "CartTableItem")

    /// Reuse identifier `cell`.
    let cell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "cell")

    /// Reuse identifier `ChatReceiverTableItem`.
    let chatReceiverTableItem: RswiftResources.ReuseIdentifier<ChatReceiverTableItem> = .init(identifier: "ChatReceiverTableItem")

    /// Reuse identifier `ChatSenderTableItem`.
    let chatSenderTableItem: RswiftResources.ReuseIdentifier<ChatSenderTableItem> = .init(identifier: "ChatSenderTableItem")

    /// Reuse identifier `ChatTableItem`.
    let chatTableItem: RswiftResources.ReuseIdentifier<ChatTableItem> = .init(identifier: "ChatTableItem")

    /// Reuse identifier `Comments_TableCell`.
    let comments_TableCell: RswiftResources.ReuseIdentifier<Comments_TableCell> = .init(identifier: "Comments_TableCell")

    /// Reuse identifier `CreateEventTableItem`.
    let createEventTableItem: RswiftResources.ReuseIdentifier<CreateEventTableItem> = .init(identifier: "CreateEventTableItem")

    /// Reuse identifier `CreateProductCollectionItem`.
    let createProductCollectionItem: RswiftResources.ReuseIdentifier<CreateProductCollectionItem> = .init(identifier: "CreateProductCollectionItem")

    /// Reuse identifier `CreateProductTableItem`.
    let createProductTableItem: RswiftResources.ReuseIdentifier<CreateProductTableItem> = .init(identifier: "CreateProductTableItem")

    /// Reuse identifier `DashBoardSectionSixTableItem`.
    let dashBoardSectionSixTableItem: RswiftResources.ReuseIdentifier<DashBoardSectionSixTableItem> = .init(identifier: "DashBoardSectionSixTableItem")

    /// Reuse identifier `DashboardArtist_CollectionCell`.
    let dashboardArtist_CollectionCell: RswiftResources.ReuseIdentifier<DashboardArtist_CollectionCell> = .init(identifier: "DashboardArtist_CollectionCell")

    /// Reuse identifier `DashboardGenres_CollectionCell`.
    let dashboardGenres_CollectionCell: RswiftResources.ReuseIdentifier<DashboardGenres_CollectionCell> = .init(identifier: "DashboardGenres_CollectionCell")

    /// Reuse identifier `DashboardNewRelease_CollectionCell`.
    let dashboardNewRelease_CollectionCell: RswiftResources.ReuseIdentifier<DashboardNewRelease_CollectionCell> = .init(identifier: "DashboardNewRelease_CollectionCell")

    /// Reuse identifier `DashboardPopular_CollectionCell`.
    let dashboardPopular_CollectionCell: RswiftResources.ReuseIdentifier<DashboardPopular_CollectionCell> = .init(identifier: "DashboardPopular_CollectionCell")

    /// Reuse identifier `DashboardRecentlyPlayed_CollectionCell`.
    let dashboardRecentlyPlayed_CollectionCell: RswiftResources.ReuseIdentifier<DashboardRecentlyPlayed_CollectionCell> = .init(identifier: "DashboardRecentlyPlayed_CollectionCell")

    /// Reuse identifier `DashboardRecentlyPlayed_TableCell`.
    let dashboardRecentlyPlayed_TableCell: RswiftResources.ReuseIdentifier<DashboardRecentlyPlayed_TableCell> = .init(identifier: "DashboardRecentlyPlayed_TableCell")

    /// Reuse identifier `DashboardSectionFiveTableItem`.
    let dashboardSectionFiveTableItem: RswiftResources.ReuseIdentifier<DashboardSectionFiveTableItem> = .init(identifier: "DashboardSectionFiveTableItem")

    /// Reuse identifier `DashboardSectionFourTableItem`.
    let dashboardSectionFourTableItem: RswiftResources.ReuseIdentifier<DashboardSectionFourTableItem> = .init(identifier: "DashboardSectionFourTableItem")

    /// Reuse identifier `DashboardSectionOneCollectionItem`.
    let dashboardSectionOneCollectionItem: RswiftResources.ReuseIdentifier<DashboardSectionOneCollectionItem> = .init(identifier: "DashboardSectionOneCollectionItem")

    /// Reuse identifier `DashboardSectionOneTableItem`.
    let dashboardSectionOneTableItem: RswiftResources.ReuseIdentifier<DashboardSectionOneTableItem> = .init(identifier: "DashboardSectionOneTableItem")

    /// Reuse identifier `DashboardSectionThreeTableItem`.
    let dashboardSectionThreeTableItem: RswiftResources.ReuseIdentifier<DashboardSectionThreeTableItem> = .init(identifier: "DashboardSectionThreeTableItem")

    /// Reuse identifier `DashboardSectionTwoCollectionItem`.
    let dashboardSectionTwoCollectionItem: RswiftResources.ReuseIdentifier<DashboardSectionTwoCollectionItem> = .init(identifier: "DashboardSectionTwoCollectionItem")

    /// Reuse identifier `DashboardSectionTwoTableItem`.
    let dashboardSectionTwoTableItem: RswiftResources.ReuseIdentifier<DashboardSectionTwoTableItem> = .init(identifier: "DashboardSectionTwoTableItem")

    /// Reuse identifier `DashboardSlider_CollectionCell`.
    let dashboardSlider_CollectionCell: RswiftResources.ReuseIdentifier<DashboardSlider_CollectionCell> = .init(identifier: "DashboardSlider_CollectionCell")

    /// Reuse identifier `EventDetailTableItem`.
    let eventDetailTableItem: RswiftResources.ReuseIdentifier<EventDetailTableItem> = .init(identifier: "EventDetailTableItem")

    /// Reuse identifier `EventShowTableItem`.
    let eventShowTableItem: RswiftResources.ReuseIdentifier<EventShowTableItem> = .init(identifier: "EventShowTableItem")

    /// Reuse identifier `ExpandableProfileTableItem`.
    let expandableProfileTableItem: RswiftResources.ReuseIdentifier<ExpandableProfileTableItem> = .init(identifier: "ExpandableProfileTableItem")

    /// Reuse identifier `ExpandableReviewTableItem`.
    let expandableReviewTableItem: RswiftResources.ReuseIdentifier<ExpandableReviewTableItem> = .init(identifier: "ExpandableReviewTableItem")

    /// Reuse identifier `ExpandableTextTableItem`.
    let expandableTextTableItem: RswiftResources.ReuseIdentifier<ExpandableTextTableItem> = .init(identifier: "ExpandableTextTableItem")

    /// Reuse identifier `Favorite_TableCell`.
    let favorite_TableCell: RswiftResources.ReuseIdentifier<Favorite_TableCell> = .init(identifier: "Favorite_TableCell")

    /// Reuse identifier `Followers_TableCell`.
    let followers_TableCell: RswiftResources.ReuseIdentifier<Followers_TableCell> = .init(identifier: "Followers_TableCell")

    /// Reuse identifier `Followings_TableCell`.
    let followings_TableCell: RswiftResources.ReuseIdentifier<Followings_TableCell> = .init(identifier: "Followings_TableCell")

    /// Reuse identifier `GenresSongs_TableCell`.
    let genresSongs_TableCell: RswiftResources.ReuseIdentifier<GenresSongs_TableCell> = .init(identifier: "GenresSongs_TableCell")

    /// Reuse identifier `Genres_CollectionCell`.
    let genres_CollectionCell: RswiftResources.ReuseIdentifier<Genres_CollectionCell> = .init(identifier: "Genres_CollectionCell")

    /// Reuse identifier `LatestDownload_TableCell`.
    let latestDownload_TableCell: RswiftResources.ReuseIdentifier<LatestDownload_TableCell> = .init(identifier: "LatestDownload_TableCell")

    /// Reuse identifier `LatestSongs_TableCell`.
    let latestSongs_TableCell: RswiftResources.ReuseIdentifier<LatestSongs_TableCell> = .init(identifier: "LatestSongs_TableCell")

    /// Reuse identifier `Library_TableCell`.
    let library_TableCell: RswiftResources.ReuseIdentifier<Library_TableCell> = .init(identifier: "Library_TableCell")

    /// Reuse identifier `Liked_TableCell`.
    let liked_TableCell: RswiftResources.ReuseIdentifier<Liked_TableCell> = .init(identifier: "Liked_TableCell")

    /// Reuse identifier `ManageSessionTableItem`.
    let manageSessionTableItem: RswiftResources.ReuseIdentifier<ManageSessionTableItem> = .init(identifier: "ManageSessionTableItem")

    /// Reuse identifier `MyPlayList_CollectionCell`.
    let myPlayList_CollectionCell: RswiftResources.ReuseIdentifier<MyPlayList_CollectionCell> = .init(identifier: "MyPlayList_CollectionCell")

    /// Reuse identifier `NoDataTableItem`.
    let noDataTableItem: RswiftResources.ReuseIdentifier<NoDataTableItem> = .init(identifier: "NoDataTableItem")

    /// Reuse identifier `NoLoginTableItem`.
    let noLoginTableItem: RswiftResources.ReuseIdentifier<NoLoginTableItem> = .init(identifier: "NoLoginTableItem")

    /// Reuse identifier `Notifications_TableCell`.
    let notifications_TableCell: RswiftResources.ReuseIdentifier<Notifications_TableCell> = .init(identifier: "Notifications_TableCell")

    /// Reuse identifier `PlayListSectionOneTableItem`.
    let playListSectionOneTableItem: RswiftResources.ReuseIdentifier<PlayListSectionOneTableItem> = .init(identifier: "PlayListSectionOneTableItem")

    /// Reuse identifier `PlayListSectionTwoTableItem`.
    let playListSectionTwoTableItem: RswiftResources.ReuseIdentifier<PlayListSectionTwoTableItem> = .init(identifier: "PlayListSectionTwoTableItem")

    /// Reuse identifier `PlaylistSectionTwoCollectionItem`.
    let playlistSectionTwoCollectionItem: RswiftResources.ReuseIdentifier<PlaylistSectionTwoCollectionItem> = .init(identifier: "PlaylistSectionTwoCollectionItem")

    /// Reuse identifier `Playlist_CollectionCell`.
    let playlist_CollectionCell: RswiftResources.ReuseIdentifier<Playlist_CollectionCell> = .init(identifier: "Playlist_CollectionCell")

    /// Reuse identifier `Popular_TableCell`.
    let popular_TableCell: RswiftResources.ReuseIdentifier<Popular_TableCell> = .init(identifier: "Popular_TableCell")

    /// Reuse identifier `productHeadrItem`.
    let productHeadrItem: RswiftResources.ReuseIdentifier<productHeadrItem> = .init(identifier: "productHeadrItem")

    /// Reuse identifier `ProductTableItem`.
    let productTableItem: RswiftResources.ReuseIdentifier<ProductTableItem> = .init(identifier: "ProductTableItem")

    /// Reuse identifier `ProductsCollectionItem`.
    let productsCollectionItem: RswiftResources.ReuseIdentifier<ProductsCollectionItem> = .init(identifier: "ProductsCollectionItem")

    /// Reuse identifier `ProductsCollectionTableCell`.
    let productsCollectionTableCell: RswiftResources.ReuseIdentifier<ProductsCollectionTableCell> = .init(identifier: "ProductsCollectionTableCell")

    /// Reuse identifier `productsRelatedItem`.
    let productsRelatedItem: RswiftResources.ReuseIdentifier<productsRelatedItem> = .init(identifier: "productsRelatedItem")

    /// Reuse identifier `productsSectionItem`.
    let productsSectionItem: RswiftResources.ReuseIdentifier<productsSectionItem> = .init(identifier: "productsSectionItem")

    /// Reuse identifier `ProfilePlaylistCollectionCell`.
    let profilePlaylistCollectionCell: RswiftResources.ReuseIdentifier<ProfilePlaylistCollectionCell> = .init(identifier: "ProfilePlaylistCollectionCell")

    /// Reuse identifier `ProfileSongTableItem`.
    let profileSongTableItem: RswiftResources.ReuseIdentifier<ProfileSongTableItem> = .init(identifier: "ProfileSongTableItem")

    /// Reuse identifier `PurchaseButtonTableItem`.
    let purchaseButtonTableItem: RswiftResources.ReuseIdentifier<PurchaseButtonTableItem> = .init(identifier: "PurchaseButtonTableItem")

    /// Reuse identifier `PurchaseTableItem`.
    let purchaseTableItem: RswiftResources.ReuseIdentifier<PurchaseTableItem> = .init(identifier: "PurchaseTableItem")

    /// Reuse identifier `ReceiverImageTableItem`.
    let receiverImageTableItem: RswiftResources.ReuseIdentifier<ReceiverImageTableItem> = .init(identifier: "ReceiverImageTableItem")

    /// Reuse identifier `RecentlyPlayed_TableCell`.
    let recentlyPlayed_TableCell: RswiftResources.ReuseIdentifier<RecentlyPlayed_TableCell> = .init(identifier: "RecentlyPlayed_TableCell")

    /// Reuse identifier `SearchAlbum_TableCell`.
    let searchAlbum_TableCell: RswiftResources.ReuseIdentifier<SearchAlbum_TableCell> = .init(identifier: "SearchAlbum_TableCell")

    /// Reuse identifier `SearchArtist_TableCell`.
    let searchArtist_TableCell: RswiftResources.ReuseIdentifier<SearchArtist_TableCell> = .init(identifier: "SearchArtist_TableCell")

    /// Reuse identifier `SearchPlaylist_TableCell`.
    let searchPlaylist_TableCell: RswiftResources.ReuseIdentifier<SearchPlaylist_TableCell> = .init(identifier: "SearchPlaylist_TableCell")

    /// Reuse identifier `SearchSong_TableCell`.
    let searchSong_TableCell: RswiftResources.ReuseIdentifier<SearchSong_TableCell> = .init(identifier: "SearchSong_TableCell")

    /// Reuse identifier `SectionHeaderTableItem`.
    let sectionHeaderTableItem: RswiftResources.ReuseIdentifier<SectionHeaderTableItem> = .init(identifier: "SectionHeaderTableItem")

    /// Reuse identifier `SectionHeaderTableViewCell`.
    let sectionHeaderTableViewCell: RswiftResources.ReuseIdentifier<SectionHeaderTableViewCell> = .init(identifier: "SectionHeaderTableViewCell")

    /// Reuse identifier `SelectFilter_TableCell`.
    let selectFilter_TableCell: RswiftResources.ReuseIdentifier<SelectFilter_TableCell> = .init(identifier: "SelectFilter_TableCell")

    /// Reuse identifier `SelectGenres_TableCell`.
    let selectGenres_TableCell: RswiftResources.ReuseIdentifier<SelectGenres_TableCell> = .init(identifier: "SelectGenres_TableCell")

    /// Reuse identifier `SelectPlaylist_TableCell`.
    let selectPlaylist_TableCell: RswiftResources.ReuseIdentifier<SelectPlaylist_TableCell> = .init(identifier: "SelectPlaylist_TableCell")

    /// Reuse identifier `SelectPrice_TableCell`.
    let selectPrice_TableCell: RswiftResources.ReuseIdentifier<SelectPrice_TableCell> = .init(identifier: "SelectPrice_TableCell")

    /// Reuse identifier `SenderImageTableItem`.
    let senderImageTableItem: RswiftResources.ReuseIdentifier<SenderImageTableItem> = .init(identifier: "SenderImageTableItem")

    /// Reuse identifier `SettingCreditCardTableCell`.
    let settingCreditCardTableCell: RswiftResources.ReuseIdentifier<SettingCreditCardTableCell> = .init(identifier: "SettingCreditCardTableCell")

    /// Reuse identifier `SettingNotificationItem`.
    let settingNotificationItem: RswiftResources.ReuseIdentifier<SettingNotificationItem> = .init(identifier: "SettingNotificationItem")

    /// Reuse identifier `SettingsSectionOneTableItem`.
    let settingsSectionOneTableItem: RswiftResources.ReuseIdentifier<SettingsSectionOneTableItem> = .init(identifier: "SettingsSectionOneTableItem")

    /// Reuse identifier `SettingsSectionTwoTableItem`.
    let settingsSectionTwoTableItem: RswiftResources.ReuseIdentifier<SettingsSectionTwoTableItem> = .init(identifier: "SettingsSectionTwoTableItem")

    /// Reuse identifier `Settings_TableCell`.
    let settings_TableCell: RswiftResources.ReuseIdentifier<Settings_TableCell> = .init(identifier: "Settings_TableCell")

    /// Reuse identifier `Shared_TableCell`.
    let shared_TableCell: RswiftResources.ReuseIdentifier<Shared_TableCell> = .init(identifier: "Shared_TableCell")

    /// Reuse identifier `StationTableItem`.
    let stationTableItem: RswiftResources.ReuseIdentifier<StationTableItem> = .init(identifier: "StationTableItem")

    /// Reuse identifier `StationsTableItem`.
    let stationsTableItem: RswiftResources.ReuseIdentifier<StationsTableItem> = .init(identifier: "StationsTableItem")

    /// Reuse identifier `StoreCollectionItem`.
    let storeCollectionItem: RswiftResources.ReuseIdentifier<StoreCollectionItem> = .init(identifier: "StoreCollectionItem")

    /// Reuse identifier `TopAlbums_CollectionCell`.
    let topAlbums_CollectionCell: RswiftResources.ReuseIdentifier<TopAlbums_CollectionCell> = .init(identifier: "TopAlbums_CollectionCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 20 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var album: album { .init(bundle: bundle) }
    var chat: chat { .init(bundle: bundle) }
    var comment: comment { .init(bundle: bundle) }
    var dashboard: dashboard { .init(bundle: bundle) }
    var discover: discover { .init(bundle: bundle) }
    var events: events { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var library: library { .init(bundle: bundle) }
    var login: login { .init(bundle: bundle) }
    var notLoggedStoryBoard: notLoggedStoryBoard { .init(bundle: bundle) }
    var notfication: notfication { .init(bundle: bundle) }
    var player: player { .init(bundle: bundle) }
    var playlist: playlist { .init(bundle: bundle) }
    var popups: popups { .init(bundle: bundle) }
    var products: products { .init(bundle: bundle) }
    var search: search { .init(bundle: bundle) }
    var settings: settings { .init(bundle: bundle) }
    var stations: stations { .init(bundle: bundle) }
    var track: track { .init(bundle: bundle) }
    var upgrade: upgrade { .init(bundle: bundle) }

    func album(bundle: Foundation.Bundle) -> album {
      .init(bundle: bundle)
    }
    func chat(bundle: Foundation.Bundle) -> chat {
      .init(bundle: bundle)
    }
    func comment(bundle: Foundation.Bundle) -> comment {
      .init(bundle: bundle)
    }
    func dashboard(bundle: Foundation.Bundle) -> dashboard {
      .init(bundle: bundle)
    }
    func discover(bundle: Foundation.Bundle) -> discover {
      .init(bundle: bundle)
    }
    func events(bundle: Foundation.Bundle) -> events {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func library(bundle: Foundation.Bundle) -> library {
      .init(bundle: bundle)
    }
    func login(bundle: Foundation.Bundle) -> login {
      .init(bundle: bundle)
    }
    func notLoggedStoryBoard(bundle: Foundation.Bundle) -> notLoggedStoryBoard {
      .init(bundle: bundle)
    }
    func notfication(bundle: Foundation.Bundle) -> notfication {
      .init(bundle: bundle)
    }
    func player(bundle: Foundation.Bundle) -> player {
      .init(bundle: bundle)
    }
    func playlist(bundle: Foundation.Bundle) -> playlist {
      .init(bundle: bundle)
    }
    func popups(bundle: Foundation.Bundle) -> popups {
      .init(bundle: bundle)
    }
    func products(bundle: Foundation.Bundle) -> products {
      .init(bundle: bundle)
    }
    func search(bundle: Foundation.Bundle) -> search {
      .init(bundle: bundle)
    }
    func settings(bundle: Foundation.Bundle) -> settings {
      .init(bundle: bundle)
    }
    func stations(bundle: Foundation.Bundle) -> stations {
      .init(bundle: bundle)
    }
    func track(bundle: Foundation.Bundle) -> track {
      .init(bundle: bundle)
    }
    func upgrade(bundle: Foundation.Bundle) -> upgrade {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.album.validate()
      try self.chat.validate()
      try self.comment.validate()
      try self.dashboard.validate()
      try self.discover.validate()
      try self.events.validate()
      try self.launchScreen.validate()
      try self.library.validate()
      try self.login.validate()
      try self.notLoggedStoryBoard.validate()
      try self.notfication.validate()
      try self.player.validate()
      try self.playlist.validate()
      try self.popups.validate()
      try self.products.validate()
      try self.search.validate()
      try self.settings.validate()
      try self.stations.validate()
      try self.track.validate()
      try self.upgrade.validate()
    }


    /// Storyboard `Album`.
    struct album: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Album"

      var uploadAlbumVC: RswiftResources.StoryboardViewControllerIdentifier<UploadAlbumVC> { StoryboardViewControllerIdentifier(identifier: "UploadAlbumVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in storyboard 'Album', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Title' is used in storyboard 'Album', but couldn't be loaded.") }
        if UIKit.UIImage(named: "description", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'description' is used in storyboard 'Album', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dj", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dj' is used in storyboard 'Album', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_action_close' is used in storyboard 'Album', but couldn't be loaded.") }
        if UIKit.UIImage(named: "money-sack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'money-sack' is used in storyboard 'Album', but couldn't be loaded.") }
        if uploadAlbumVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'uploadAlbumVC' could not be loaded from storyboard 'Album' as 'UploadAlbumVC'.") }
      }
    }

    /// Storyboard `Chat`.
    struct chat: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Chat"

      var chatScreenVC: RswiftResources.StoryboardViewControllerIdentifier<ChatScreenVC> { StoryboardViewControllerIdentifier(identifier: "ChatScreenVC", storyboard: name, bundle: bundle) }
      var chatVC: RswiftResources.StoryboardViewControllerIdentifier<ChatVC> { StoryboardViewControllerIdentifier(identifier: "ChatVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "EmptyData", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EmptyData' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chatBackground", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chatBackground' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_action_back' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "send_img_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'send_img_ic' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "send_msg_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'send_msg_ic' is used in storyboard 'Chat', but couldn't be loaded.") }
        if chatScreenVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatScreenVC' could not be loaded from storyboard 'Chat' as 'ChatScreenVC'.") }
        if chatVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatVC' could not be loaded from storyboard 'Chat' as 'ChatVC'.") }
      }
    }

    /// Storyboard `Comment`.
    struct comment: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Comment"

      var commentsVC: RswiftResources.StoryboardViewControllerIdentifier<CommentsVC> { StoryboardViewControllerIdentifier(identifier: "CommentsVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "ic_commentBig", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_commentBig' is used in storyboard 'Comment', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_playerCancel", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_playerCancel' is used in storyboard 'Comment', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_send' is used in storyboard 'Comment', but couldn't be loaded.") }
        if commentsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'commentsVC' could not be loaded from storyboard 'Comment' as 'CommentsVC'.") }
      }
    }

    /// Storyboard `Dashboard`.
    struct dashboard: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = TabbarVC

      let bundle: Foundation.Bundle

      let name = "Dashboard"

      var activitiesVC: RswiftResources.StoryboardViewControllerIdentifier<ActivitiesVC> { StoryboardViewControllerIdentifier(identifier: "ActivitiesVC", storyboard: name, bundle: bundle) }
      var albumsVC: RswiftResources.StoryboardViewControllerIdentifier<AlbumsVC> { StoryboardViewControllerIdentifier(identifier: "AlbumsVC", storyboard: name, bundle: bundle) }
      var browseVC: RswiftResources.StoryboardViewControllerIdentifier<FavouriteTBVC> { StoryboardViewControllerIdentifier(identifier: "BrowseVC", storyboard: name, bundle: bundle) }
      var cartVC: RswiftResources.StoryboardViewControllerIdentifier<CartVC> { StoryboardViewControllerIdentifier(identifier: "CartVC", storyboard: name, bundle: bundle) }
      var dashBoardTabbar: RswiftResources.StoryboardViewControllerIdentifier<TabbarVC> { StoryboardViewControllerIdentifier(identifier: "DashBoardTabbar", storyboard: name, bundle: bundle) }
      var dashboard1VC: RswiftResources.StoryboardViewControllerIdentifier<Dashboard1VC> { StoryboardViewControllerIdentifier(identifier: "Dashboard1VC", storyboard: name, bundle: bundle) }
      var libraryVC: RswiftResources.StoryboardViewControllerIdentifier<LibraryVC> { StoryboardViewControllerIdentifier(identifier: "LibraryVC", storyboard: name, bundle: bundle) }
      var playlistVC: RswiftResources.StoryboardViewControllerIdentifier<PlaylistVC> { StoryboardViewControllerIdentifier(identifier: "PlaylistVC", storyboard: name, bundle: bundle) }
      var profile1VC: RswiftResources.StoryboardViewControllerIdentifier<Profile1VC> { StoryboardViewControllerIdentifier(identifier: "Profile1VC", storyboard: name, bundle: bundle) }
      var profileLikedVC: RswiftResources.StoryboardViewControllerIdentifier<ProfileLikedVC> { StoryboardViewControllerIdentifier(identifier: "ProfileLikedVC", storyboard: name, bundle: bundle) }
      var profilePlaylistVC: RswiftResources.StoryboardViewControllerIdentifier<ProfilePlaylistVC> { StoryboardViewControllerIdentifier(identifier: "ProfilePlaylistVC", storyboard: name, bundle: bundle) }
      var showAlbumVC: RswiftResources.StoryboardViewControllerIdentifier<ShowAlbumVC> { StoryboardViewControllerIdentifier(identifier: "ShowAlbumVC", storyboard: name, bundle: bundle) }
      var showProfileVC: RswiftResources.StoryboardViewControllerIdentifier<ShowProfileVC> { StoryboardViewControllerIdentifier(identifier: "ShowProfileVC", storyboard: name, bundle: bundle) }
      var songVC: RswiftResources.StoryboardViewControllerIdentifier<SongVC> { StoryboardViewControllerIdentifier(identifier: "SongVC", storyboard: name, bundle: bundle) }
      var stationsVC: RswiftResources.StoryboardViewControllerIdentifier<StationsVC> { StoryboardViewControllerIdentifier(identifier: "StationsVC", storyboard: name, bundle: bundle) }
      var storeVC: RswiftResources.StoryboardViewControllerIdentifier<StoreVC> { StoryboardViewControllerIdentifier(identifier: "StoreVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "Profile", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Profile' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profilecover", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Profilecover' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "check", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'check' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-cart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-cart' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-chat", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-chat' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-favoritees-tb", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-favoritees-tb' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-favoritees-tb-selected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-favoritees-tb-selected' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-home-tb", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-home-tb' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-home-tb-selected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-home-tb-selected' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-info-square", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-info-square' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-music-tb", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-music-tb' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-notification", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-notification' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-paperplus", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-paperplus' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-play-btn-inc", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-play-btn-inc' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-playlist-tb-selected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-playlist-tb-selected' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-playlists-tb", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-playlists-tb' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-profile-tb", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-profile-tb' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-profile-tb-selected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-profile-tb-selected' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-round-dotedmore", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-round-dotedmore' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-search' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-shuffle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-shuffle' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-trending-tb", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-trending-tb' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-trending-tb-selected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-trending-tb-selected' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_add' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chat", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_chat' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_edit' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_musicBig", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_musicBig' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "info", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'info' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'more' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "notificationSettings", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'notificationSettings' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if activitiesVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'activitiesVC' could not be loaded from storyboard 'Dashboard' as 'ActivitiesVC'.") }
        if albumsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'albumsVC' could not be loaded from storyboard 'Dashboard' as 'AlbumsVC'.") }
        if browseVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'browseVC' could not be loaded from storyboard 'Dashboard' as 'FavouriteTBVC'.") }
        if cartVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'cartVC' could not be loaded from storyboard 'Dashboard' as 'CartVC'.") }
        if dashBoardTabbar() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'dashBoardTabbar' could not be loaded from storyboard 'Dashboard' as 'TabbarVC'.") }
        if dashboard1VC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'dashboard1VC' could not be loaded from storyboard 'Dashboard' as 'Dashboard1VC'.") }
        if libraryVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'libraryVC' could not be loaded from storyboard 'Dashboard' as 'LibraryVC'.") }
        if playlistVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'playlistVC' could not be loaded from storyboard 'Dashboard' as 'PlaylistVC'.") }
        if profile1VC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'profile1VC' could not be loaded from storyboard 'Dashboard' as 'Profile1VC'.") }
        if profileLikedVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'profileLikedVC' could not be loaded from storyboard 'Dashboard' as 'ProfileLikedVC'.") }
        if profilePlaylistVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'profilePlaylistVC' could not be loaded from storyboard 'Dashboard' as 'ProfilePlaylistVC'.") }
        if showAlbumVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'showAlbumVC' could not be loaded from storyboard 'Dashboard' as 'ShowAlbumVC'.") }
        if showProfileVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'showProfileVC' could not be loaded from storyboard 'Dashboard' as 'ShowProfileVC'.") }
        if songVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'songVC' could not be loaded from storyboard 'Dashboard' as 'SongVC'.") }
        if stationsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'stationsVC' could not be loaded from storyboard 'Dashboard' as 'StationsVC'.") }
        if storeVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'storeVC' could not be loaded from storyboard 'Dashboard' as 'StoreVC'.") }
      }
    }

    /// Storyboard `Discover`.
    struct discover: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Discover"

      var artistInfoVC: RswiftResources.StoryboardViewControllerIdentifier<ArtistInfoVC> { StoryboardViewControllerIdentifier(identifier: "ArtistInfoVC", storyboard: name, bundle: bundle) }
      var artistVC: RswiftResources.StoryboardViewControllerIdentifier<ArtistVC> { StoryboardViewControllerIdentifier(identifier: "ArtistVC", storyboard: name, bundle: bundle) }
      var bankTransferVC: RswiftResources.StoryboardViewControllerIdentifier<BankTransferVC> { StoryboardViewControllerIdentifier(identifier: "BankTransferVC", storyboard: name, bundle: bundle) }
      var dashboardRecentlyPlayedVC: RswiftResources.StoryboardViewControllerIdentifier<DashboardRecentlyPlayedVC> { StoryboardViewControllerIdentifier(identifier: "DashboardRecentlyPlayedVC", storyboard: name, bundle: bundle) }
      var discoverShowInfoVC: RswiftResources.StoryboardViewControllerIdentifier<DiscoverShowInfoVC> { StoryboardViewControllerIdentifier(identifier: "DiscoverShowInfoVC", storyboard: name, bundle: bundle) }
      var genresSongsVC: RswiftResources.StoryboardViewControllerIdentifier<GenresSongsVC> { StoryboardViewControllerIdentifier(identifier: "GenresSongsVC", storyboard: name, bundle: bundle) }
      var infoListVC: RswiftResources.StoryboardViewControllerIdentifier<InfoListVC> { StoryboardViewControllerIdentifier(identifier: "InfoListVC", storyboard: name, bundle: bundle) }
      var latestSongsVC: RswiftResources.StoryboardViewControllerIdentifier<LatestSongsVC> { StoryboardViewControllerIdentifier(identifier: "LatestSongsVC", storyboard: name, bundle: bundle) }
      var popularVC: RswiftResources.StoryboardViewControllerIdentifier<PopularVC> { StoryboardViewControllerIdentifier(identifier: "PopularVC", storyboard: name, bundle: bundle) }
      var userInfoVC: RswiftResources.StoryboardViewControllerIdentifier<UserInfoVC> { StoryboardViewControllerIdentifier(identifier: "UserInfoVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in storyboard 'Discover', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_action_close' is used in storyboard 'Discover', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_add' is used in storyboard 'Discover', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_addUser", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_addUser' is used in storyboard 'Discover', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_moreHorizontal", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_moreHorizontal' is used in storyboard 'Discover', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_musicBig", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_musicBig' is used in storyboard 'Discover', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_personBig", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_personBig' is used in storyboard 'Discover', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pin", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_pin' is used in storyboard 'Discover', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_settings_person", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_settings_person' is used in storyboard 'Discover', but couldn't be loaded.") }
        if artistInfoVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'artistInfoVC' could not be loaded from storyboard 'Discover' as 'ArtistInfoVC'.") }
        if artistVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'artistVC' could not be loaded from storyboard 'Discover' as 'ArtistVC'.") }
        if bankTransferVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'bankTransferVC' could not be loaded from storyboard 'Discover' as 'BankTransferVC'.") }
        if dashboardRecentlyPlayedVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'dashboardRecentlyPlayedVC' could not be loaded from storyboard 'Discover' as 'DashboardRecentlyPlayedVC'.") }
        if discoverShowInfoVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'discoverShowInfoVC' could not be loaded from storyboard 'Discover' as 'DiscoverShowInfoVC'.") }
        if genresSongsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'genresSongsVC' could not be loaded from storyboard 'Discover' as 'GenresSongsVC'.") }
        if infoListVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'infoListVC' could not be loaded from storyboard 'Discover' as 'InfoListVC'.") }
        if latestSongsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'latestSongsVC' could not be loaded from storyboard 'Discover' as 'LatestSongsVC'.") }
        if popularVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'popularVC' could not be loaded from storyboard 'Discover' as 'PopularVC'.") }
        if userInfoVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'userInfoVC' could not be loaded from storyboard 'Discover' as 'UserInfoVC'.") }
      }
    }

    /// Storyboard `Events`.
    struct events: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Events"

      var createEventVC: RswiftResources.StoryboardViewControllerIdentifier<CreateEventVC> { StoryboardViewControllerIdentifier(identifier: "CreateEventVC", storyboard: name, bundle: bundle) }
      var eventsVC: RswiftResources.StoryboardViewControllerIdentifier<EventsVC> { StoryboardViewControllerIdentifier(identifier: "EventsVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "ic_add", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_add' is used in storyboard 'Events', but couldn't be loaded.") }
        if createEventVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'createEventVC' could not be loaded from storyboard 'Events' as 'CreateEventVC'.") }
        if eventsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'eventsVC' could not be loaded from storyboard 'Events' as 'EventsVC'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "CircleLogo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'CircleLogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }

    /// Storyboard `Library`.
    struct library: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Library"

      var favoriteVC: RswiftResources.StoryboardViewControllerIdentifier<FavoriteVC> { StoryboardViewControllerIdentifier(identifier: "FavoriteVC", storyboard: name, bundle: bundle) }
      var latestDownloadVC: RswiftResources.StoryboardViewControllerIdentifier<LatestDownloadVC> { StoryboardViewControllerIdentifier(identifier: "LatestDownloadVC", storyboard: name, bundle: bundle) }
      var likedVC: RswiftResources.StoryboardViewControllerIdentifier<LikedVC> { StoryboardViewControllerIdentifier(identifier: "LikedVC", storyboard: name, bundle: bundle) }
      var purchasesVC: RswiftResources.StoryboardViewControllerIdentifier<PurchasesVC> { StoryboardViewControllerIdentifier(identifier: "PurchasesVC", storyboard: name, bundle: bundle) }
      var recentlyPlayedVC: RswiftResources.StoryboardViewControllerIdentifier<RecentlyPlayedVC> { StoryboardViewControllerIdentifier(identifier: "RecentlyPlayedVC", storyboard: name, bundle: bundle) }
      var sharedVC: RswiftResources.StoryboardViewControllerIdentifier<SharedVC> { StoryboardViewControllerIdentifier(identifier: "SharedVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "EmptyData", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EmptyData' is used in storyboard 'Library', but couldn't be loaded.") }
        if favoriteVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'favoriteVC' could not be loaded from storyboard 'Library' as 'FavoriteVC'.") }
        if latestDownloadVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'latestDownloadVC' could not be loaded from storyboard 'Library' as 'LatestDownloadVC'.") }
        if likedVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'likedVC' could not be loaded from storyboard 'Library' as 'LikedVC'.") }
        if purchasesVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'purchasesVC' could not be loaded from storyboard 'Library' as 'PurchasesVC'.") }
        if recentlyPlayedVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'recentlyPlayedVC' could not be loaded from storyboard 'Library' as 'RecentlyPlayedVC'.") }
        if sharedVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'sharedVC' could not be loaded from storyboard 'Library' as 'SharedVC'.") }
      }
    }

    /// Storyboard `Login`.
    struct login: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = SplashScreenVC

      let bundle: Foundation.Bundle

      let name = "Login"

      var forgetPasswordVC: RswiftResources.StoryboardViewControllerIdentifier<ForgetPasswordVC> { StoryboardViewControllerIdentifier(identifier: "ForgetPasswordVC", storyboard: name, bundle: bundle) }
      var genresVC: RswiftResources.StoryboardViewControllerIdentifier<GenresVC> { StoryboardViewControllerIdentifier(identifier: "GenresVC", storyboard: name, bundle: bundle) }
      var getStartedVC: RswiftResources.StoryboardViewControllerIdentifier<GetStartedVC> { StoryboardViewControllerIdentifier(identifier: "GetStartedVC", storyboard: name, bundle: bundle) }
      var introVC: RswiftResources.StoryboardViewControllerIdentifier<IntroVC> { StoryboardViewControllerIdentifier(identifier: "IntroVC", storyboard: name, bundle: bundle) }
      var loginVC: RswiftResources.StoryboardViewControllerIdentifier<LoginVC> { StoryboardViewControllerIdentifier(identifier: "LoginVC", storyboard: name, bundle: bundle) }
      var loginWithWoWonderVC: RswiftResources.StoryboardViewControllerIdentifier<LoginWithWoWonderVC> { StoryboardViewControllerIdentifier(identifier: "LoginWithWoWonderVC", storyboard: name, bundle: bundle) }
      var main: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { StoryboardViewControllerIdentifier(identifier: "main", storyboard: name, bundle: bundle) }
      var registerVC: RswiftResources.StoryboardViewControllerIdentifier<RegisterVC> { StoryboardViewControllerIdentifier(identifier: "RegisterVC", storyboard: name, bundle: bundle) }
      var splashScreenVC: RswiftResources.StoryboardViewControllerIdentifier<SplashScreenVC> { StoryboardViewControllerIdentifier(identifier: "SplashScreenVC", storyboard: name, bundle: bundle) }
      var twoFactorVerifyVC: RswiftResources.StoryboardViewControllerIdentifier<TwoFactorVerifyVC> { StoryboardViewControllerIdentifier(identifier: "TwoFactorVerifyVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "CircleLogo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'CircleLogo' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Music", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Music' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bgCircles", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'bgCircles' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bgWalkthrough", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'bgWalkthrough' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'facebook' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "googleIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'googleIcon' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-checkbox", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-checkbox' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-email", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-email' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-eye", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-eye' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-lock", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-lock' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-uncheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-uncheck' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-user-Bold", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-user-Bold' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_logo' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_WoWonder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'logo_WoWonder' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "stp_card_applepay.png", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'stp_card_applepay.png' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "twoFactor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'twoFactor' is used in storyboard 'Login', but couldn't be loaded.") }
        if forgetPasswordVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'forgetPasswordVC' could not be loaded from storyboard 'Login' as 'ForgetPasswordVC'.") }
        if genresVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'genresVC' could not be loaded from storyboard 'Login' as 'GenresVC'.") }
        if getStartedVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'getStartedVC' could not be loaded from storyboard 'Login' as 'GetStartedVC'.") }
        if introVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'introVC' could not be loaded from storyboard 'Login' as 'IntroVC'.") }
        if loginVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Login' as 'LoginVC'.") }
        if loginWithWoWonderVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loginWithWoWonderVC' could not be loaded from storyboard 'Login' as 'LoginWithWoWonderVC'.") }
        if registerVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'registerVC' could not be loaded from storyboard 'Login' as 'RegisterVC'.") }
        if splashScreenVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'splashScreenVC' could not be loaded from storyboard 'Login' as 'SplashScreenVC'.") }
        if twoFactorVerifyVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'twoFactorVerifyVC' could not be loaded from storyboard 'Login' as 'TwoFactorVerifyVC'.") }
        if main() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'main' could not be loaded from storyboard 'Login' as 'UIKit.UINavigationController'.") }
      }
    }

    /// Storyboard `NotLoggedStoryBoard`.
    struct notLoggedStoryBoard: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "NotLoggedStoryBoard"

      var notLoggedInBrowseVC: RswiftResources.StoryboardViewControllerIdentifier<NotLoggedInBrowseVC> { StoryboardViewControllerIdentifier(identifier: "NotLoggedInBrowseVC", storyboard: name, bundle: bundle) }
      var notLoggedInDashBoardTabbar: RswiftResources.StoryboardViewControllerIdentifier<NotLoggedIntabbar> { StoryboardViewControllerIdentifier(identifier: "notLoggedInDashBoardTabbar", storyboard: name, bundle: bundle) }
      var notLoggedInHomeVC: RswiftResources.StoryboardViewControllerIdentifier<NotLoggedInHomeVC> { StoryboardViewControllerIdentifier(identifier: "NotLoggedInHomeVC", storyboard: name, bundle: bundle) }
      var notLoggedInPlaylistVC: RswiftResources.StoryboardViewControllerIdentifier<NotLoggedInPlaylistVC> { StoryboardViewControllerIdentifier(identifier: "NotLoggedInPlaylistVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "ic-home-tb", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-home-tb' is used in storyboard 'NotLoggedStoryBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-home-tb-selected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-home-tb-selected' is used in storyboard 'NotLoggedStoryBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-music-tb", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-music-tb' is used in storyboard 'NotLoggedStoryBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-trending-tb", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-trending-tb' is used in storyboard 'NotLoggedStoryBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-trending-tb-selected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-trending-tb-selected' is used in storyboard 'NotLoggedStoryBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_playlist", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_tab_playlist' is used in storyboard 'NotLoggedStoryBoard', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "magnifyingglass") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'magnifyingglass' is used in storyboard 'NotLoggedStoryBoard', but couldn't be loaded.") } }
        if notLoggedInBrowseVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'notLoggedInBrowseVC' could not be loaded from storyboard 'NotLoggedStoryBoard' as 'NotLoggedInBrowseVC'.") }
        if notLoggedInHomeVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'notLoggedInHomeVC' could not be loaded from storyboard 'NotLoggedStoryBoard' as 'NotLoggedInHomeVC'.") }
        if notLoggedInPlaylistVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'notLoggedInPlaylistVC' could not be loaded from storyboard 'NotLoggedStoryBoard' as 'NotLoggedInPlaylistVC'.") }
        if notLoggedInDashBoardTabbar() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'notLoggedInDashBoardTabbar' could not be loaded from storyboard 'NotLoggedStoryBoard' as 'NotLoggedIntabbar'.") }
      }
    }

    /// Storyboard `Notfication`.
    struct notfication: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Notfication"

      var notificationVC: RswiftResources.StoryboardViewControllerIdentifier<NotificationVC> { StoryboardViewControllerIdentifier(identifier: "NotificationVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "EmptyData", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EmptyData' is used in storyboard 'Notfication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "notificationSettings", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'notificationSettings' is used in storyboard 'Notfication', but couldn't be loaded.") }
        if notificationVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'notificationVC' could not be loaded from storyboard 'Notfication' as 'NotificationVC'.") }
      }
    }

    /// Storyboard `Player`.
    struct player: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Player"

      var musicPlayerVC: RswiftResources.StoryboardViewControllerIdentifier<MusicPlayerVC> { StoryboardViewControllerIdentifier(identifier: "MusicPlayerVC", storyboard: name, bundle: bundle) }
      var playerShowInfoVC: RswiftResources.StoryboardViewControllerIdentifier<PlayerShowInfoVC> { StoryboardViewControllerIdentifier(identifier: "PlayerShowInfoVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "Image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Image' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-chat", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-chat' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-dislike-heart-border", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-dislike-heart-border' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-dot-side-menu", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-dot-side-menu' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-heart-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-heart-bs' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-play-forward10", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-play-forward10' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-play-next", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-play-next' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-play-prev", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-play-prev' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-play-prev10", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-play-prev10' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-repeat", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-repeat' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-round-dotedmore", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-round-dotedmore' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-scrollup-arrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-scrollup-arrow' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-share-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-share-bs' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-shuffle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-shuffle' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cloudPlayer", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cloudPlayer' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comment", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_comment' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_heart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_heart' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_musicType", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_musicType' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_play", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_play' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_playPlayer", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_playPlayer' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_playerCancel", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_playerCancel' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_share", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_share' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_star' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_starPlayer", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_starPlayer' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIImage(named: "line_verticle_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'line_verticle_white' is used in storyboard 'Player', but couldn't be loaded.") }
        if musicPlayerVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'musicPlayerVC' could not be loaded from storyboard 'Player' as 'MusicPlayerVC'.") }
        if playerShowInfoVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'playerShowInfoVC' could not be loaded from storyboard 'Player' as 'PlayerShowInfoVC'.") }
      }
    }

    /// Storyboard `Playlist`.
    struct playlist: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Playlist"

      var createPlaylistVC: RswiftResources.StoryboardViewControllerIdentifier<CreatePlaylistVC> { StoryboardViewControllerIdentifier(identifier: "CreatePlaylistVC", storyboard: name, bundle: bundle) }
      var showPlaylistDetailsVC: RswiftResources.StoryboardViewControllerIdentifier<ShowPlaylistDetailsVC> { StoryboardViewControllerIdentifier(identifier: "ShowPlaylistDetailsVC", storyboard: name, bundle: bundle) }
      var updatePlaylistVC: RswiftResources.StoryboardViewControllerIdentifier<UpdatePlaylistVC> { StoryboardViewControllerIdentifier(identifier: "UpdatePlaylistVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Show", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Show' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Title' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-dot-side-menu", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-dot-side-menu' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-download-square", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-download-square' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-placeholder-image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-placeholder-image' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-play-btn-inc", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-play-btn-inc' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-shuffle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-shuffle' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_action_close' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_lock", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_lock' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_musicBig", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_musicBig' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_uncheck_radio", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_uncheck_radio' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'share' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if createPlaylistVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'createPlaylistVC' could not be loaded from storyboard 'Playlist' as 'CreatePlaylistVC'.") }
        if showPlaylistDetailsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'showPlaylistDetailsVC' could not be loaded from storyboard 'Playlist' as 'ShowPlaylistDetailsVC'.") }
        if updatePlaylistVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'updatePlaylistVC' could not be loaded from storyboard 'Playlist' as 'UpdatePlaylistVC'.") }
      }
    }

    /// Storyboard `Popups`.
    struct popups: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Popups"

      var blockUserPopUpVC: RswiftResources.StoryboardViewControllerIdentifier<BlockUserPopUpVC> { StoryboardViewControllerIdentifier(identifier: "BlockUserPopUpVC", storyboard: name, bundle: bundle) }
      var confirmCodeVC: RswiftResources.StoryboardViewControllerIdentifier<ConfirmCodeVC> { StoryboardViewControllerIdentifier(identifier: "ConfirmCodeVC", storyboard: name, bundle: bundle) }
      var deletePlaylistPopUpVC: RswiftResources.StoryboardViewControllerIdentifier<DeletePlaylistPopUpVC> { StoryboardViewControllerIdentifier(identifier: "DeletePlaylistPopUpVC", storyboard: name, bundle: bundle) }
      var loginPopupVC: RswiftResources.StoryboardViewControllerIdentifier<LoginPopupVC> { StoryboardViewControllerIdentifier(identifier: "LoginPopupVC", storyboard: name, bundle: bundle) }
      var logoutVC: RswiftResources.StoryboardViewControllerIdentifier<LogoutVC> { StoryboardViewControllerIdentifier(identifier: "LogoutVC", storyboard: name, bundle: bundle) }
      var playlistPopUpVC: RswiftResources.StoryboardViewControllerIdentifier<PlaylistPopUpVC> { StoryboardViewControllerIdentifier(identifier: "PlaylistPopUpVC", storyboard: name, bundle: bundle) }
      var premiumPopupVC: RswiftResources.StoryboardViewControllerIdentifier<PremiumPopupVC> { StoryboardViewControllerIdentifier(identifier: "PremiumPopupVC", storyboard: name, bundle: bundle) }
      var reportVC: RswiftResources.StoryboardViewControllerIdentifier<ReportVC> { StoryboardViewControllerIdentifier(identifier: "ReportVC", storyboard: name, bundle: bundle) }
      var securityPopupVC: RswiftResources.StoryboardViewControllerIdentifier<SecurityPopupVC> { StoryboardViewControllerIdentifier(identifier: "SecurityPopupVC", storyboard: name, bundle: bundle) }
      var selectAPlaylistVC: RswiftResources.StoryboardViewControllerIdentifier<SelectAPlaylistVC> { StoryboardViewControllerIdentifier(identifier: "SelectAPlaylistVC", storyboard: name, bundle: bundle) }
      var selectGenresVC: RswiftResources.StoryboardViewControllerIdentifier<SelectGenresVC> { StoryboardViewControllerIdentifier(identifier: "SelectGenresVC", storyboard: name, bundle: bundle) }
      var selectPriceVC: RswiftResources.StoryboardViewControllerIdentifier<SelectPriceVC> { StoryboardViewControllerIdentifier(identifier: "SelectPriceVC", storyboard: name, bundle: bundle) }
      var selectTimeZoneVC: RswiftResources.StoryboardViewControllerIdentifier<SelectTimeZoneVC> { StoryboardViewControllerIdentifier(identifier: "SelectTimeZoneVC", storyboard: name, bundle: bundle) }
      var twoFactorUpdatePopupVC: RswiftResources.StoryboardViewControllerIdentifier<TwoFactorUpdatePopupVC> { StoryboardViewControllerIdentifier(identifier: "TwoFactorUpdatePopupVC", storyboard: name, bundle: bundle) }
      var unblockUserPopUpVC: RswiftResources.StoryboardViewControllerIdentifier<UnblockUserPopUpVC> { StoryboardViewControllerIdentifier(identifier: "UnblockUserPopUpVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "trophy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'trophy' is used in storyboard 'Popups', but couldn't be loaded.") }
        if blockUserPopUpVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'blockUserPopUpVC' could not be loaded from storyboard 'Popups' as 'BlockUserPopUpVC'.") }
        if confirmCodeVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'confirmCodeVC' could not be loaded from storyboard 'Popups' as 'ConfirmCodeVC'.") }
        if deletePlaylistPopUpVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'deletePlaylistPopUpVC' could not be loaded from storyboard 'Popups' as 'DeletePlaylistPopUpVC'.") }
        if loginPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loginPopupVC' could not be loaded from storyboard 'Popups' as 'LoginPopupVC'.") }
        if logoutVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'logoutVC' could not be loaded from storyboard 'Popups' as 'LogoutVC'.") }
        if playlistPopUpVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'playlistPopUpVC' could not be loaded from storyboard 'Popups' as 'PlaylistPopUpVC'.") }
        if premiumPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'premiumPopupVC' could not be loaded from storyboard 'Popups' as 'PremiumPopupVC'.") }
        if reportVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'reportVC' could not be loaded from storyboard 'Popups' as 'ReportVC'.") }
        if securityPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'securityPopupVC' could not be loaded from storyboard 'Popups' as 'SecurityPopupVC'.") }
        if selectAPlaylistVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'selectAPlaylistVC' could not be loaded from storyboard 'Popups' as 'SelectAPlaylistVC'.") }
        if selectGenresVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'selectGenresVC' could not be loaded from storyboard 'Popups' as 'SelectGenresVC'.") }
        if selectPriceVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'selectPriceVC' could not be loaded from storyboard 'Popups' as 'SelectPriceVC'.") }
        if selectTimeZoneVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'selectTimeZoneVC' could not be loaded from storyboard 'Popups' as 'SelectTimeZoneVC'.") }
        if twoFactorUpdatePopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'twoFactorUpdatePopupVC' could not be loaded from storyboard 'Popups' as 'TwoFactorUpdatePopupVC'.") }
        if unblockUserPopUpVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'unblockUserPopUpVC' could not be loaded from storyboard 'Popups' as 'UnblockUserPopUpVC'.") }
      }
    }

    /// Storyboard `Products`.
    struct products: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Products"

      var createProductVC: RswiftResources.StoryboardViewControllerIdentifier<CreateProductVC> { StoryboardViewControllerIdentifier(identifier: "CreateProductVC", storyboard: name, bundle: bundle) }
      var discoverProductsVC: RswiftResources.StoryboardViewControllerIdentifier<DiscoverProductsVC> { StoryboardViewControllerIdentifier(identifier: "DiscoverProductsVC", storyboard: name, bundle: bundle) }
      var eventDetailVC: RswiftResources.StoryboardViewControllerIdentifier<EventDetailVC> { StoryboardViewControllerIdentifier(identifier: "EventDetailVC", storyboard: name, bundle: bundle) }
      var filterProductsVC: RswiftResources.StoryboardViewControllerIdentifier<FilterProductsVC> { StoryboardViewControllerIdentifier(identifier: "FilterProductsVC", storyboard: name, bundle: bundle) }
      var productsVC: RswiftResources.StoryboardViewControllerIdentifier<ProductsVC> { StoryboardViewControllerIdentifier(identifier: "ProductsVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "ic_add", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_add' is used in storyboard 'Products', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_filter", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_filter' is used in storyboard 'Products', but couldn't be loaded.") }
        if createProductVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'createProductVC' could not be loaded from storyboard 'Products' as 'CreateProductVC'.") }
        if discoverProductsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'discoverProductsVC' could not be loaded from storyboard 'Products' as 'DiscoverProductsVC'.") }
        if eventDetailVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'eventDetailVC' could not be loaded from storyboard 'Products' as 'EventDetailVC'.") }
        if filterProductsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'filterProductsVC' could not be loaded from storyboard 'Products' as 'FilterProductsVC'.") }
        if productsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'productsVC' could not be loaded from storyboard 'Products' as 'ProductsVC'.") }
      }
    }

    /// Storyboard `Search`.
    struct search: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Search"

      var filterSearchVC: RswiftResources.StoryboardViewControllerIdentifier<FilterSearchVC> { StoryboardViewControllerIdentifier(identifier: "FilterSearchVC", storyboard: name, bundle: bundle) }
      var searchAlbumsVC: RswiftResources.StoryboardViewControllerIdentifier<SearchAlbumsVC> { StoryboardViewControllerIdentifier(identifier: "SearchAlbumsVC", storyboard: name, bundle: bundle) }
      var searchArtistVC: RswiftResources.StoryboardViewControllerIdentifier<SearchArtistVC> { StoryboardViewControllerIdentifier(identifier: "SearchArtistVC", storyboard: name, bundle: bundle) }
      var searchParentVC: RswiftResources.StoryboardViewControllerIdentifier<SearchParentVC> { StoryboardViewControllerIdentifier(identifier: "SearchParentVC", storyboard: name, bundle: bundle) }
      var searchPlaylistVC: RswiftResources.StoryboardViewControllerIdentifier<SearchPlaylistVC> { StoryboardViewControllerIdentifier(identifier: "SearchPlaylistVC", storyboard: name, bundle: bundle) }
      var searchSongsVC: RswiftResources.StoryboardViewControllerIdentifier<SearchSongsVC> { StoryboardViewControllerIdentifier(identifier: "SearchSongsVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "EmptyData", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EmptyData' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_filter", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_filter' is used in storyboard 'Search', but couldn't be loaded.") }
        if filterSearchVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'filterSearchVC' could not be loaded from storyboard 'Search' as 'FilterSearchVC'.") }
        if searchAlbumsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchAlbumsVC' could not be loaded from storyboard 'Search' as 'SearchAlbumsVC'.") }
        if searchArtistVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchArtistVC' could not be loaded from storyboard 'Search' as 'SearchArtistVC'.") }
        if searchParentVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchParentVC' could not be loaded from storyboard 'Search' as 'SearchParentVC'.") }
        if searchPlaylistVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchPlaylistVC' could not be loaded from storyboard 'Search' as 'SearchPlaylistVC'.") }
        if searchSongsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchSongsVC' could not be loaded from storyboard 'Search' as 'SearchSongsVC'.") }
      }
    }

    /// Storyboard `Settings`.
    struct settings: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Settings"

      var articlesDetailsVC: RswiftResources.StoryboardViewControllerIdentifier<ArticlesDetailsVC> { StoryboardViewControllerIdentifier(identifier: "ArticlesDetailsVC", storyboard: name, bundle: bundle) }
      var articlesVC: RswiftResources.StoryboardViewControllerIdentifier<ArticlesVC> { StoryboardViewControllerIdentifier(identifier: "ArticlesVC", storyboard: name, bundle: bundle) }
      var authorizeNetVC: RswiftResources.StoryboardViewControllerIdentifier<AuthorizeNetVC> { StoryboardViewControllerIdentifier(identifier: "AuthorizeNetVC", storyboard: name, bundle: bundle) }
      var blockUsersVC: RswiftResources.StoryboardViewControllerIdentifier<BlockUsersVC> { StoryboardViewControllerIdentifier(identifier: "BlockUsersVC", storyboard: name, bundle: bundle) }
      var cashFreePopUpVC: RswiftResources.StoryboardViewControllerIdentifier<CashFreePopUpVC> { StoryboardViewControllerIdentifier(identifier: "CashFreePopUpVC", storyboard: name, bundle: bundle) }
      var changePasswordVC: RswiftResources.StoryboardViewControllerIdentifier<ChangePasswordVC> { StoryboardViewControllerIdentifier(identifier: "ChangePasswordVC", storyboard: name, bundle: bundle) }
      var deleteAccountVC: RswiftResources.StoryboardViewControllerIdentifier<DeleteAccountVC> { StoryboardViewControllerIdentifier(identifier: "DeleteAccountVC", storyboard: name, bundle: bundle) }
      var editProfileVC: RswiftResources.StoryboardViewControllerIdentifier<EditProfileVC> { StoryboardViewControllerIdentifier(identifier: "EditProfileVC", storyboard: name, bundle: bundle) }
      var followersVC: RswiftResources.StoryboardViewControllerIdentifier<FollowersVC> { StoryboardViewControllerIdentifier(identifier: "FollowersVC", storyboard: name, bundle: bundle) }
      var followingsVC: RswiftResources.StoryboardViewControllerIdentifier<FollowingsVC> { StoryboardViewControllerIdentifier(identifier: "FollowingsVC", storyboard: name, bundle: bundle) }
      var manageSessionsVC: RswiftResources.StoryboardViewControllerIdentifier<ManageSessionsVC> { StoryboardViewControllerIdentifier(identifier: "ManageSessionsVC", storyboard: name, bundle: bundle) }
      var myAccountVC: RswiftResources.StoryboardViewControllerIdentifier<MyAccountVC> { StoryboardViewControllerIdentifier(identifier: "MyAccountVC", storyboard: name, bundle: bundle) }
      var myInfoVC: RswiftResources.StoryboardViewControllerIdentifier<MyInfoVC> { StoryboardViewControllerIdentifier(identifier: "MyInfoVC", storyboard: name, bundle: bundle) }
      var payVC: RswiftResources.StoryboardViewControllerIdentifier<PayVC> { StoryboardViewControllerIdentifier(identifier: "PayVC", storyboard: name, bundle: bundle) }
      var paystackPopupVC: RswiftResources.StoryboardViewControllerIdentifier<PaystackPopupVC> { StoryboardViewControllerIdentifier(identifier: "PaystackPopupVC", storyboard: name, bundle: bundle) }
      var settingNotificationVC: RswiftResources.StoryboardViewControllerIdentifier<SettingNotificationVC> { StoryboardViewControllerIdentifier(identifier: "SettingNotificationVC", storyboard: name, bundle: bundle) }
      var settingVC1: RswiftResources.StoryboardViewControllerIdentifier<SettingVC1> { StoryboardViewControllerIdentifier(identifier: "SettingVC1", storyboard: name, bundle: bundle) }
      var settingWalletVC: RswiftResources.StoryboardViewControllerIdentifier<SettingWalletVC> { StoryboardViewControllerIdentifier(identifier: "SettingWalletVC", storyboard: name, bundle: bundle) }
      var settingsNC: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { StoryboardViewControllerIdentifier(identifier: "settingsNC", storyboard: name, bundle: bundle) }
      var settingsPopupVC: RswiftResources.StoryboardViewControllerIdentifier<SettingsPopupVC> { StoryboardViewControllerIdentifier(identifier: "SettingsPopupVC", storyboard: name, bundle: bundle) }
      var settingsTwoFactorVC: RswiftResources.StoryboardViewControllerIdentifier<SettingsTwoFactorVC> { StoryboardViewControllerIdentifier(identifier: "SettingsTwoFactorVC", storyboard: name, bundle: bundle) }
      var settingsVC: RswiftResources.StoryboardViewControllerIdentifier<SettingsVC> { StoryboardViewControllerIdentifier(identifier: "SettingsVC", storyboard: name, bundle: bundle) }
      var webViewVC: RswiftResources.StoryboardViewControllerIdentifier<WebViewVC> { StoryboardViewControllerIdentifier(identifier: "WebViewVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "2User", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named '2User' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ApplePayBTN_64pt__black_textLogo_", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ApplePayBTN_64pt__black_textLogo_' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BackButton", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'BackButton' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "EmptyData", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EmptyData' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Message-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Message-1' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-calender", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-calender' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-detail-bs", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-detail-bs' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-email", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-email' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-masterCard", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-masterCard' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-mastercard-b", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-mastercard-b' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-profile-dark", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic-profile-dark' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_action_back' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_facebook", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_facebook' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_flag", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_flag' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_gender", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_gender' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_globe", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_globe' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pin", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_pin' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_send' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_uncheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_uncheck' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_uncheck_radio", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_uncheck_radio' is used in storyboard 'Settings', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "iphone.homebutton") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'iphone.homebutton' is used in storyboard 'Settings', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "no_profile_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'no_profile_image' is used in storyboard 'Settings', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "person") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'person' is used in storyboard 'Settings', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "send_msg_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'send_msg_ic' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shield", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'shield' is used in storyboard 'Settings', but couldn't be loaded.") }
        if articlesDetailsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'articlesDetailsVC' could not be loaded from storyboard 'Settings' as 'ArticlesDetailsVC'.") }
        if articlesVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'articlesVC' could not be loaded from storyboard 'Settings' as 'ArticlesVC'.") }
        if authorizeNetVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'authorizeNetVC' could not be loaded from storyboard 'Settings' as 'AuthorizeNetVC'.") }
        if blockUsersVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'blockUsersVC' could not be loaded from storyboard 'Settings' as 'BlockUsersVC'.") }
        if cashFreePopUpVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'cashFreePopUpVC' could not be loaded from storyboard 'Settings' as 'CashFreePopUpVC'.") }
        if changePasswordVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'Settings' as 'ChangePasswordVC'.") }
        if deleteAccountVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'deleteAccountVC' could not be loaded from storyboard 'Settings' as 'DeleteAccountVC'.") }
        if editProfileVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'Settings' as 'EditProfileVC'.") }
        if followersVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'followersVC' could not be loaded from storyboard 'Settings' as 'FollowersVC'.") }
        if followingsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'followingsVC' could not be loaded from storyboard 'Settings' as 'FollowingsVC'.") }
        if manageSessionsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'manageSessionsVC' could not be loaded from storyboard 'Settings' as 'ManageSessionsVC'.") }
        if myAccountVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'myAccountVC' could not be loaded from storyboard 'Settings' as 'MyAccountVC'.") }
        if myInfoVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'myInfoVC' could not be loaded from storyboard 'Settings' as 'MyInfoVC'.") }
        if payVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'payVC' could not be loaded from storyboard 'Settings' as 'PayVC'.") }
        if paystackPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'paystackPopupVC' could not be loaded from storyboard 'Settings' as 'PaystackPopupVC'.") }
        if settingNotificationVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingNotificationVC' could not be loaded from storyboard 'Settings' as 'SettingNotificationVC'.") }
        if settingVC1() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingVC1' could not be loaded from storyboard 'Settings' as 'SettingVC1'.") }
        if settingWalletVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingWalletVC' could not be loaded from storyboard 'Settings' as 'SettingWalletVC'.") }
        if settingsPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingsPopupVC' could not be loaded from storyboard 'Settings' as 'SettingsPopupVC'.") }
        if settingsTwoFactorVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingsTwoFactorVC' could not be loaded from storyboard 'Settings' as 'SettingsTwoFactorVC'.") }
        if settingsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingsVC' could not be loaded from storyboard 'Settings' as 'SettingsVC'.") }
        if webViewVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'webViewVC' could not be loaded from storyboard 'Settings' as 'WebViewVC'.") }
        if settingsNC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingsNC' could not be loaded from storyboard 'Settings' as 'UIKit.UINavigationController'.") }
      }
    }

    /// Storyboard `Stations`.
    struct stations: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Stations"

      var stationsFullVC: RswiftResources.StoryboardViewControllerIdentifier<StationsFullVC> { StoryboardViewControllerIdentifier(identifier: "StationsFullVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "ic_searchBig", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_searchBig' is used in storyboard 'Stations', but couldn't be loaded.") }
        if stationsFullVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'stationsFullVC' could not be loaded from storyboard 'Stations' as 'StationsFullVC'.") }
      }
    }

    /// Storyboard `Track`.
    struct track: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Track"

      var importURLVC: RswiftResources.StoryboardViewControllerIdentifier<ImportURLVC> { StoryboardViewControllerIdentifier(identifier: "ImportURLVC", storyboard: name, bundle: bundle) }
      var uploadTrackVC: RswiftResources.StoryboardViewControllerIdentifier<uploadTrackVC> { StoryboardViewControllerIdentifier(identifier: "uploadTrackVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in storyboard 'Track', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Title", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Title' is used in storyboard 'Track', but couldn't be loaded.") }
        if UIKit.UIImage(named: "description", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'description' is used in storyboard 'Track', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dj", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dj' is used in storyboard 'Track', but couldn't be loaded.") }
        if UIKit.UIImage(named: "download", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'download' is used in storyboard 'Track', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_action_close' is used in storyboard 'Track', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_uncheck_radio", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_uncheck_radio' is used in storyboard 'Track', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lyric", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'lyric' is used in storyboard 'Track', but couldn't be loaded.") }
        if UIKit.UIImage(named: "money-sack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'money-sack' is used in storyboard 'Track', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shield", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'shield' is used in storyboard 'Track', but couldn't be loaded.") }
        if UIKit.UIImage(named: "soundcloud", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'soundcloud' is used in storyboard 'Track', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tag", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'tag' is used in storyboard 'Track', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'user' is used in storyboard 'Track', but couldn't be loaded.") }
        if importURLVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'importURLVC' could not be loaded from storyboard 'Track' as 'ImportURLVC'.") }
        if uploadTrackVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'uploadTrackVC' could not be loaded from storyboard 'Track' as 'uploadTrackVC'.") }
      }
    }

    /// Storyboard `Upgrade`.
    struct upgrade: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Upgrade"

      var paymentOptionVC: RswiftResources.StoryboardViewControllerIdentifier<PaymentOptionVC> { StoryboardViewControllerIdentifier(identifier: "PaymentOptionVC", storyboard: name, bundle: bundle) }
      var upgradeProVC: RswiftResources.StoryboardViewControllerIdentifier<UpgradeProVC> { StoryboardViewControllerIdentifier(identifier: "UpgradeProVC", storyboard: name, bundle: bundle) }
      var upgradeToProVC: RswiftResources.StoryboardViewControllerIdentifier<UpgradeToProVC> { StoryboardViewControllerIdentifier(identifier: "UpgradeToProVC", storyboard: name, bundle: bundle) }
      var widthdrawalsVC: RswiftResources.StoryboardViewControllerIdentifier<WidthdrawalsVC> { StoryboardViewControllerIdentifier(identifier: "WidthdrawalsVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if paymentOptionVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'paymentOptionVC' could not be loaded from storyboard 'Upgrade' as 'PaymentOptionVC'.") }
        if upgradeProVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'upgradeProVC' could not be loaded from storyboard 'Upgrade' as 'UpgradeProVC'.") }
        if upgradeToProVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'upgradeToProVC' could not be loaded from storyboard 'Upgrade' as 'UpgradeToProVC'.") }
        if widthdrawalsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'widthdrawalsVC' could not be loaded from storyboard 'Upgrade' as 'WidthdrawalsVC'.") }
      }
    }
  }
}